(()=>{"use strict";var e={d:(t,n)=>{for(var o in n)e.o(n,o)&&!e.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:n[o]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};function n(){const e=document.createElement("div");return e.classList.add("projectCreator"),e.innerHTML='\n        <div>\n            <input id="projectName" type="text" placeholder="Project name...">\n            <span class="projectErorrMsg"></span>\n        </div>\n        <div>\n            <button class="projectBtn cancelProjectBtn">Cancel</button>\n            <button class="projectBtn addProjectBtn">Add Project</button>\n        </div>\n    ',e}e.r(t),e.d(t,{vP:()=>a,Xx:()=>u,O4:()=>s,$L:()=>i,vr:()=>d,p6:()=>p,xC:()=>l});class o{constructor(e){this.title=e,this.tasks=[]}get projectHTML(){return function(e){const t=document.createElement("div");return t.classList.add("project"),t.innerHTML=`\n        <i class="fa-solid fa-circle"></i>\n        <div class="projectTitle">${e}</div>\n        <div class="taskCounter"></div>\n        <i class="fa-solid fa-trash bin"></i>\n    `,t}(this.title)}addTask(e){this.tasks.push(e)}removeTask(e){this.tasks.splice(e,1)}}class c{constructor(e,t,n,o,c){this.title=e,this.description=t,this.priority=n,this.dueDate=o,this.project=c,this.completion=!1}get taskHTML(){}}class r{constructor(){this.projects=[]}get allTasks(){return this.projects.reduce(((e,t)=>e.concat(t.tasks)),[])}}function s(){const e=new r;e.projects.push(new o("Home"));const t=new c("exampleTask","testing please work","medium","12/12/12","Home");return e.projects[0].tasks.push(t),localStorage.masterObject=JSON.stringify(e),e}function a(e,t,...n){n.forEach((n=>n.addEventListener(t,e)))}function l(e,t,...n){n.forEach((n=>n.removeEventListener(t,e)))}function i(e){return new o(e)}function d(e,t,n,o,r){return new c(e,t,n,o,r)}function u(e){return e?/^[1-9!@#$%^&*(),.?":{}|<>].*/g.test(e)?{validity:!1,message:"cant start with numbers or special character"}:function(e){return!!m.projects.find((t=>t.title.toLowerCase()==e.toLowerCase()))}(e)?{validity:!1,message:"project name already exsists"}:{validity:!0,message:""}:{validity:!1,message:"cant enter empty name"}}function p(e){return e?e.replace(/T.*:.*/g,"").replace(/-/g,"/"):"not due"}const m=(()=>{if("undefined"!=typeof Storage){if(localStorage.masterObject){const e=new r,t=JSON.parse(localStorage.masterObject);return e.projects=t.projects.map((e=>{const t=new o;return t.tasks=e.tasks.map((e=>Object.assign(new c,e))),Object.assign(t,e)})),localStorage.clear(),localStorage.masterObject=JSON.stringify(e),e}return localStorage.clear(),s()}return localStorage.clear(),s()})();function y(e){const t=document.querySelector("input#projectName"),n=u(t.value);if(!n.validity){const e=document.querySelector("span.projectErorrMsg");return e.textContent=n.message,void setTimeout((()=>{e.textContent=""}),1200)}const o=i(t.value);var c,r;c=o,(r=m).projects.push(c),localStorage.masterObject=JSON.stringify(r),k(o),S()}function v(e){const n=document.querySelector("input#taskTitle"),o=document.querySelector("#taskDescription"),c=document.querySelector("#priority"),r=document.querySelector("#projectSelection"),s=document.querySelector("#dueDate"),a=u(n.value);if(!a.validity){const e=document.querySelector("span.errorMsg");return e.textContent=a.message,void setTimeout((()=>{e.textContent=""}),1200)}const l=p(s.value),i=d(n.value,o.value,c.value,l,r.value);t.saveTask(i,m)}function f(e){const t=document.querySelector("#modalBackground"),n=document.querySelector(".modal"),o=document.querySelector(".cancelTaskBtn"),c=document.querySelector(".fa-x"),r=document.querySelector(".addTaskBtn");l(f,"click",c,o),r.removeEventListener("click",v),t.removeChild(n),t.style.display="none"}function S(e){const t=document.querySelector(".projectCreator"),n=document.querySelector(".projects"),o=document.querySelector(".addProject"),c=document.querySelector(".dropDown"),r=document.querySelector(".addProjectBtn"),s=document.querySelector(".cancelProjectBtn");r.removeEventListener("click",y),s.removeEventListener("click",S),c.removeChild(t),n.style.display="flex",o.style.display="flex"}function k(...e){console.log(e);const t=document.querySelector(".projects");e.forEach((e=>{"Home"!=e.title&&t.appendChild(e.projectHTML)}))}const g=document.querySelector(".menuIcon"),j=document.querySelector(".projectsTitle"),h=document.querySelector(".addTask"),q=document.querySelector(".addProject");document.querySelector("aside"),document.querySelector("main"),g.addEventListener("click",(function(){const e=document.querySelector("main#main");document.querySelector(".taskContainer"),e.classList.toggle("menuIsNotActive")})),j.addEventListener("click",(function(e){const t=document.querySelector(".dropDown"),n=e.target.children[0];"none"==t.style.display?(t.style.display="flex",n.classList.toggle("fa-caret-down"),n.classList.toggle("fa-caret-up")):(t.style.display="none",n.classList.toggle("fa-caret-down"),n.classList.toggle("fa-caret-up"))})),h.addEventListener("click",(function(e){const t=document.querySelector("#modalBackground");if(t.childNodes.length>0)return;t.appendChild(function(e){const t=document.createElement("div");t.classList.add("modal"),t.innerHTML='\n        <div class="taskCreationHeader modalHeader">\n            <div>New Task</div>\n            <i class="fa-solid fa-x"></i>\n        </div>\n        <form class="taskCreationForm">\n            <div class="taskDetails1">\n                <label for="taskTitle">Title:</label>\n                <input class="taskEntry" type="text" id="taskTitle" placeholder="e.g. Pay bills" spellcheck = "true">\n                <span class="errorMsg"></span>\n\n                <label for="taskDescription">Description:</label>\n                <textarea class="taskEntry" id="taskDescription" placeholder="e.g. internet, phone, rent, etc" spellcheck = "true"></textarea>\n\n            </div>\n            <div class="taskDetails2">\n                <label for="dueDate">Due Date:</label>\n                <input type="datetime-local" class="taskEntry" id="dueDate">\n\n                <label for="priority">Priority:</label>\n                <select id="priority" class="taskEntry">\n                    <option value="none" selected>None</option>\n                    <option value="low">Low</option>\n                    <option value="medium">Medium</option>\n                    <option value="high">High</option>\n                </select>\n\n                <label for="projectSelection">Project:</label>\n                <select id="projectSelection" class="taskEntry">\n                \n                </select>\n            </div>\n            <div class="taskCreationDecision">\n                <button type="button" class="cancelTaskBtn modalBtn cancelModalBtn">Cancel</button>\n                <button type="button" class="addTaskBtn modalBtn addModalBtn">Add task</button>\n            </div>\n\n        </form>\n\n    ';const n=t.querySelector("#projectSelection");return e.projects.forEach((e=>{const t=document.createElement("option");t.textContent=e.title,"Home"==e.title&&(t.selected=!0),n.appendChild(t)})),t}(m));const n=document.querySelector(".fa-x"),o=document.querySelector(".cancelTaskBtn"),c=document.querySelector(".addTaskBtn");a(f,"click",n,o),c.addEventListener("click",v),t.style.display="flex"})),q.addEventListener("click",(function(e){n();const t=document.querySelector(".projects"),o=document.querySelector(".addProject");document.querySelector(".dropDown").appendChild(n());const c=document.querySelector(".addProjectBtn"),r=document.querySelector(".cancelProjectBtn");c.addEventListener("click",y),r.addEventListener("click",S),t.style.display="none",o.style.display="none"})),console.log(m),k(...m.projects)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,