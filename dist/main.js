(()=>{"use strict";function e(){const e=document.createElement("div");return e.classList.add("projectCreator"),e.innerHTML='\n        <div>\n            <input id="projectName" type="text" placeholder="Project name...">\n            <span class="projectErorrMsg"></span>\n        </div>\n        <div>\n            <button class="projectBtn cancelProjectBtn">Cancel</button>\n            <button class="projectBtn addProjectBtn">Add Project</button>\n        </div>\n    ',e}class t{constructor(e){this.title=e,this.tasks=[]}get projectHTML(){return function(e){const t=document.createElement("div");return t.classList.add("project"),t.innerHTML=`\n        <i class="fa-solid fa-circle"></i>\n        <div class="projectTitle">${e}</div>\n        <div class="taskCounter"></div>\n        <i class="fa-solid fa-trash bin"></i>\n    `,t}(this.title)}addTask(e){this.tasks.push(e)}removeTask(e){this.tasks.splice(e,1)}}class n{constructor(e,t,n,o,c){this.title=e,this.description=t,this.priority=n,this.dueDate=o,this.project=c,this.completion=!1}get taskHTML(){}}class o{constructor(){this.projects=[]}get allTasks(){return this.projects.reduce(((e,t)=>e.concat(t.tasks)),[])}}function c(){const e=new o;e.projects.push(new t("Home"));const c=new n("exampleTask","testing please work","medium","12/12/12","Home");return e.projects[0].tasks.push(c),localStorage.masterObject=JSON.stringify(e),e}const s=(()=>{if("undefined"!=typeof Storage){if(localStorage.masterObject){const e=new o,c=JSON.parse(localStorage.masterObject);return e.projects=c.projects.map((e=>{const o=new t;return o.tasks=e.tasks.map((e=>Object.assign(new n,e))),Object.assign(o,e)})),localStorage.masterObject=JSON.stringify(e),e}return localStorage.clear(),c()}return localStorage.clear(),c()})();function r(e){const n=document.querySelector("input#projectName"),o=(c=n.value)?/^[1-9!@#$%^&*(),.?":{}|<>].*/g.test(c)?{validity:!1,message:"cant start with numbers or special character"}:{validity:!0,message:""}:{validity:!1,message:"cant enter empty name"};var c;if(!o.validity){const e=document.querySelector("span.projectErorrMsg");return e.textContent=o.message,void setTimeout((()=>{e.textContent=""}),1200)}const r=(a=n.value,new t(a));var a,i,d;i=r,(d=s).projects.push(i),localStorage.masterObject=JSON.stringify(d),console.log(s),function(...e){console.log(e);const t=document.querySelector(".projects");e.forEach((e=>{console.log(e.projectHTML),t.appendChild(e.projectHTML)}))}(r),l()}function a(e){const t=document.querySelector("#modalBackground"),n=document.querySelector(".modal"),o=document.querySelector(".cancelTaskBtn");!function(e,t,...n){n.forEach((n=>n.removeEventListener(t,e)))}(a,"click",document.querySelector(".fa-x"),o),t.removeChild(n),t.style.display="none"}function l(e){const t=document.querySelector(".projectCreator"),n=document.querySelector(".projects"),o=document.querySelector(".addProject"),c=document.querySelector(".dropDown"),s=document.querySelector(".addProjectBtn"),a=document.querySelector(".cancelProjectBtn");s.removeEventListener("click",r),a.removeEventListener("click",l),c.removeChild(t),n.style.display="flex",o.style.display="flex"}const i=document.querySelector(".menuIcon"),d=document.querySelector(".projectsTitle"),u=document.querySelector(".addTask"),p=document.querySelector(".addProject");i.addEventListener("click",(function(){const e=document.querySelector("main#main");document.querySelector(".taskContainer"),e.classList.toggle("menuIsNotActive")})),d.addEventListener("click",(function(e){const t=document.querySelector(".dropDown"),n=e.target.children[0];"none"==t.style.display?(t.style.display="flex",n.classList.toggle("fa-caret-down"),n.classList.toggle("fa-caret-up")):(t.style.display="none",n.classList.toggle("fa-caret-down"),n.classList.toggle("fa-caret-up"))})),u.addEventListener("click",(function(e){const t=document.querySelector("#modalBackground");t.appendChild(function(){const e=document.createElement("div");return e.classList.add("modal"),e.innerHTML='\n        <div class="taskCreationHeader modalHeader">\n            <div>New Task</div>\n            <i class="fa-solid fa-x"></i>\n        </div>\n        <form class="taskCreationForm">\n            <div class="taskDetails1">\n                <label for="taskTitle">Title:</label>\n                <input class="taskEntry" type="text" id="taskTitle" placeholder="e.g. Pay bills" spellcheck = "true">\n                <span class="errorMsg"></span>\n\n                <label for="taskDescription">Description:</label>\n                <textarea class="taskEntry" id="taskDescription" placeholder="e.g. internet, phone, rent, etc" spellcheck = "true"></textarea>\n\n            </div>\n            <div class="taskDetails2">\n                <label for="dueDate">Due Date:</label>\n                <input type="datetime-local" class="taskEntry" id="dueDate">\n\n                <label for="priority">Priority:</label>\n                <select id="priority" class="taskEntry">\n                    <option value="none" selected>None</option>\n                    <option value="low">Low</option>\n                    <option value="medium">Medium</option>\n                    <option value="high">High</option>\n                </select>\n\n                <label for="projectSelection">Project:</label>\n                <select id="projectSelection" class="taskEntry">\n                \n                </select>\n            </div>\n            <div class="taskCreationDecision">\n                <button type="button" class="cancelTaskBtn modalBtn cancelModalBtn">Cancel</button>\n                <button type="button" class="addTaskBtn modalBtn addModalBtn">Add task</button>\n            </div>\n\n        </form>\n\n    ',e}()),function(e,t,...n){n.forEach((n=>n.addEventListener(t,e)))}(a,"click",document.querySelector(".fa-x"),document.querySelector(".cancelTaskBtn")),t.style.display="flex"})),p.addEventListener("click",(function(t){e();const n=document.querySelector(".projects"),o=document.querySelector(".addProject");document.querySelector(".dropDown").appendChild(e());const c=document.querySelector(".addProjectBtn"),s=document.querySelector(".cancelProjectBtn");c.addEventListener("click",r),s.addEventListener("click",l),n.style.display="none",o.style.display="none"}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U0FBUzZDLGNBQWMsYUFDL0JnQixZQUFZLEtBRXJCLE1BQU1lLEVBQW9CNUUsU0FBUzZDLGNBQWMsa0JBQzNDZ0MsRUFBbUI3RSxTQUFTNkMsY0FBYyxxQkFFaEQrQixFQUFrQkssaUJBQWlCLFFBQVMsR0FDNUNKLEVBQWlCSSxpQkFBaUIsUUFBU1IsR0FFM0NqRCxFQUFTK0MsTUFBTUMsUUFBVSxPQUN6QkUsRUFBY0gsTUFBTUMsUUFBVSxNQUVsQyxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9zcmMvbW9kdWxlcy9kb21DcmVhdGlvbi5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL3NyYy9tb2R1bGVzL2NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9zcmMvbW9kdWxlcy9mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL3NyYy9tb2R1bGVzL3N0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9zcmMvbW9kdWxlcy9mdW5jdGlvbkJ1bmRsZXIuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9zcmMvbW9kdWxlcy9VSW1hbml1cHVsYXRpb24uanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUYXNrTW9kYWwoKXtcclxuICAgIGNvbnN0IHRhc2tDcmVhdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxyXG4gICAgdGFza0NyZWF0b3IuY2xhc3NMaXN0LmFkZChcIm1vZGFsXCIpXHJcbiAgICB0YXNrQ3JlYXRvci5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInRhc2tDcmVhdGlvbkhlYWRlciBtb2RhbEhlYWRlclwiPlxyXG4gICAgICAgICAgICA8ZGl2Pk5ldyBUYXNrPC9kaXY+XHJcbiAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEtc29saWQgZmEteFwiPjwvaT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8Zm9ybSBjbGFzcz1cInRhc2tDcmVhdGlvbkZvcm1cIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhc2tEZXRhaWxzMVwiPlxyXG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cInRhc2tUaXRsZVwiPlRpdGxlOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJ0YXNrRW50cnlcIiB0eXBlPVwidGV4dFwiIGlkPVwidGFza1RpdGxlXCIgcGxhY2Vob2xkZXI9XCJlLmcuIFBheSBiaWxsc1wiIHNwZWxsY2hlY2sgPSBcInRydWVcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JNc2dcIj48L3NwYW4+XHJcblxyXG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cInRhc2tEZXNjcmlwdGlvblwiPkRlc2NyaXB0aW9uOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XCJ0YXNrRW50cnlcIiBpZD1cInRhc2tEZXNjcmlwdGlvblwiIHBsYWNlaG9sZGVyPVwiZS5nLiBpbnRlcm5ldCwgcGhvbmUsIHJlbnQsIGV0Y1wiIHNwZWxsY2hlY2sgPSBcInRydWVcIj48L3RleHRhcmVhPlxyXG5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YXNrRGV0YWlsczJcIj5cclxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJkdWVEYXRlXCI+RHVlIERhdGU6PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBjbGFzcz1cInRhc2tFbnRyeVwiIGlkPVwiZHVlRGF0ZVwiPlxyXG5cclxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJwcmlvcml0eVwiPlByaW9yaXR5OjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPVwicHJpb3JpdHlcIiBjbGFzcz1cInRhc2tFbnRyeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJub25lXCIgc2VsZWN0ZWQ+Tm9uZTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJsb3dcIj5Mb3c8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibWVkaXVtXCI+TWVkaXVtPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImhpZ2hcIj5IaWdoPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuXHJcbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwicHJvamVjdFNlbGVjdGlvblwiPlByb2plY3Q6PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9XCJwcm9qZWN0U2VsZWN0aW9uXCIgY2xhc3M9XCJ0YXNrRW50cnlcIj5cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFza0NyZWF0aW9uRGVjaXNpb25cIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2FuY2VsVGFza0J0biBtb2RhbEJ0biBjYW5jZWxNb2RhbEJ0blwiPkNhbmNlbDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJhZGRUYXNrQnRuIG1vZGFsQnRuIGFkZE1vZGFsQnRuXCI+QWRkIHRhc2s8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDwvZm9ybT5cclxuXHJcbiAgICBgXHJcblxyXG4gICAgcmV0dXJuIHRhc2tDcmVhdG9yXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm9qZWN0Q3JlYXRvciAoKSB7XHJcbiAgICBjb25zdCBwcm9qZWN0Q3JlYXRvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcclxuICAgIHByb2plY3RDcmVhdG9yLmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0Q3JlYXRvclwiKVxyXG4gICAgcHJvamVjdENyZWF0b3IuaW5uZXJIVE1MID0gYFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxpbnB1dCBpZD1cInByb2plY3ROYW1lXCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIlByb2plY3QgbmFtZS4uLlwiPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInByb2plY3RFcm9yck1zZ1wiPjwvc3Bhbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicHJvamVjdEJ0biBjYW5jZWxQcm9qZWN0QnRuXCI+Q2FuY2VsPC9idXR0b24+XHJcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJwcm9qZWN0QnRuIGFkZFByb2plY3RCdG5cIj5BZGQgUHJvamVjdDwvYnV0dG9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgYFxyXG4gICAgcmV0dXJuIHByb2plY3RDcmVhdG9yXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm9qZWN0KHByb2plY3RUaXRsZSkge1xyXG4gICAgY29uc3QgcHJvamVjdEhUTUwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXHJcbiAgICBwcm9qZWN0SFRNTC5jbGFzc0xpc3QuYWRkKFwicHJvamVjdFwiKVxyXG4gICAgcHJvamVjdEhUTUwuaW5uZXJIVE1MID0gYFxyXG4gICAgICAgIDxpIGNsYXNzPVwiZmEtc29saWQgZmEtY2lyY2xlXCI+PC9pPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJwcm9qZWN0VGl0bGVcIj4ke3Byb2plY3RUaXRsZX08L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwidGFza0NvdW50ZXJcIj48L2Rpdj5cclxuICAgICAgICA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLXRyYXNoIGJpblwiPjwvaT5cclxuICAgIGBcclxuICAgIHJldHVybiBwcm9qZWN0SFRNTFxyXG59IiwiaW1wb3J0ICogYXMgY3JlYXRpb24gZnJvbSBcIi4vZG9tQ3JlYXRpb25cIlxyXG5cclxuZXhwb3J0IGNsYXNzIFByb2plY3Qge1xyXG4gICAgY29uc3RydWN0b3IodGl0bGUpIHtcclxuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGVcclxuICAgICAgICB0aGlzLnRhc2tzID0gW11cclxuXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHByb2plY3RIVE1MICgpIHtcclxuICAgICAgICByZXR1cm4gY3JlYXRpb24uY3JlYXRlUHJvamVjdCh0aGlzLnRpdGxlKVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBhZGRUYXNrKHRhc2spe1xyXG4gICAgICAgIHRoaXMudGFza3MucHVzaCh0YXNrKVxyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZVRhc2sodGFza0luZGV4KSB7XHJcbiAgICAgICAgdGhpcy50YXNrcy5zcGxpY2UodGFza0luZGV4LCAxKVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIHRhc2sge1xyXG4gICAgY29uc3RydWN0b3IodGl0bGUsZGVzY3JpcHRpb24scHJpb3JpdHksZHVlRGF0ZSxwcm9qZWN0KSB7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xyXG4gICAgICAgIHRoaXMuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcclxuICAgICAgICB0aGlzLnByaW9yaXR5PSBwcmlvcml0eTtcclxuICAgICAgICB0aGlzLmR1ZURhdGUgPSBkdWVEYXRlO1xyXG4gICAgICAgIHRoaXMucHJvamVjdCA9IHByb2plY3RcclxuICAgICAgICB0aGlzLmNvbXBsZXRpb24gPSAgZmFsc2U7XHJcbiAgICB9XHJcbiAgICAgXHJcbiAgICBnZXQgdGFza0hUTUwgKCkge1xyXG4gICAgICAgIHJldHVybiBcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIG1hc3Rlck9iamVjdCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnByb2plY3RzID0gW11cclxuICAgIH1cclxuXHJcbiAgICBnZXQgYWxsVGFza3MoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvamVjdHMucmVkdWNlKCh0YXNrc0FycmF5LHByb2plY3QpPT4oXHJcbiAgICAgICAgICAgIHRhc2tzQXJyYXkuY29uY2F0KHByb2plY3QudGFza3MpKSxbXSlcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbiIsImltcG9ydCAqIGFzIGNscyBmcm9tIFwiLi9jbGFzc2VzXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmlyc3RUaW1lTWFzdGVyT2JqKCkge1xyXG4gICAgLy8gY3JlYXRpbmcgbWFzdGVyIG9iamVjdFxyXG4gICAgY29uc3QgbWFzdGVyT2JqZWN0ID0gbmV3IGNscy5tYXN0ZXJPYmplY3QoKVxyXG4gICAgLy8gYWRkaW5nIGhvbWUgcHJvamVjdFxyXG4gICAgbWFzdGVyT2JqZWN0LnByb2plY3RzLnB1c2gobmV3IGNscy5Qcm9qZWN0KFwiSG9tZVwiKSlcclxuICAgIC8vIGFkZGluZyBleGFtcGxlIHRhc2tcclxuICAgIGNvbnN0IGV4YW1wbGVUYXNrID0gbmV3IGNscy50YXNrKFwiZXhhbXBsZVRhc2tcIixcInRlc3RpbmcgcGxlYXNlIHdvcmtcIiwgXCJtZWRpdW1cIixcIjEyLzEyLzEyXCIsXCJIb21lXCIpXHJcbiAgICBtYXN0ZXJPYmplY3QucHJvamVjdHNbMF0udGFza3MucHVzaChleGFtcGxlVGFzaylcclxuICAgIGxvY2FsU3RvcmFnZS5tYXN0ZXJPYmplY3QgPSBKU09OLnN0cmluZ2lmeShtYXN0ZXJPYmplY3QpICAgIFxyXG4gICAgcmV0dXJuIG1hc3Rlck9iamVjdFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkRXZlbnQgKGZ1bmMsZXZlbnQsIC4uLmVsZW1lbnRzICkge1xyXG4gICAgZWxlbWVudHMuZm9yRWFjaChlbGVtZW50PT5lbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsZnVuYykpfTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVFdmVudCAoZnVuYyxldmVudCwgLi4uZWxlbWVudHMgKSB7XHJcbiAgICBlbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQ9PiBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsZnVuYykpfTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm9qZWN0KGlucHV0VmFsdWUpe1xyXG4gICAgY29uc3QgbmV3UHJvamVjdCA9IG5ldyBjbHMuUHJvamVjdChpbnB1dFZhbHVlKVxyXG4gICAgLy8gIGZvciBleHBhbnNpb24gaWYgbmVlZGVkXHJcbiAgICByZXR1cm4gbmV3UHJvamVjdFxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tOYW1lVmFsaWRpdHkobmFtZSkge1xyXG4gICAgY29uc3QgSW52YWxpZFBhdHRlcm4gPSAvXlsxLTkhQCMkJV4mKigpLC4/XCI6e318PD5dLiovZ1xyXG4gICAgaWYgKCFuYW1lKSByZXR1cm4ge1xyXG4gICAgICAgICAgICB2YWxpZGl0eTpmYWxzZSxcclxuICAgICAgICAgICAgbWVzc2FnZTogXCJjYW50IGVudGVyIGVtcHR5IG5hbWVcIlxyXG4gICAgICAgIH0gXHJcbiAgICBlbHNlIGlmIChJbnZhbGlkUGF0dGVybi50ZXN0KG5hbWUpKSByZXR1cm4ge1xyXG4gICAgICAgIHZhbGlkaXR5OmZhbHNlLFxyXG4gICAgICAgIG1lc3NhZ2U6IFwiY2FudCBzdGFydCB3aXRoIG51bWJlcnMgb3Igc3BlY2lhbCBjaGFyYWN0ZXJcIlxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICB2YWxpZGl0eTp0cnVlLFxyXG4gICAgICAgIG1lc3NhZ2UgOiBcIlwiXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQge2NyZWF0ZUZpcnN0VGltZU1hc3Rlck9ian0gZnJvbSBcIi4vZnVuY3Rpb25cIlxyXG5pbXBvcnQgKiBhcyBjbHMgZnJvbSBcIi4vY2xhc3Nlc1wiXHJcblxyXG5leHBvcnQgY29uc3QgbWFzdGVyT2JqZWN0ID0gKCgpPT57XHJcbiAgICBpZiAodHlwZW9mKFN0b3JhZ2UpICE9PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS5tYXN0ZXJPYmplY3QpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3TWFzdGVyT2JqZWN0ID0gbmV3IGNscy5tYXN0ZXJPYmplY3QoKVxyXG4gICAgICAgICAgICBjb25zdCBzdG9yZWRNYXN0ZXJPYmplY3QgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5tYXN0ZXJPYmplY3QpXHJcbiAgICAgICAgICAgIC8vIHRyYW5zZmVyaW5nIGFsbCBwcm9qZWN0cyBhbmQgdGFza3NcclxuICAgICAgICAgICAgbmV3TWFzdGVyT2JqZWN0LnByb2plY3RzID0gc3RvcmVkTWFzdGVyT2JqZWN0LnByb2plY3RzLm1hcChwcm9qZWN0PT57XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdQcm9qZWN0ID0gbmV3IGNscy5Qcm9qZWN0KClcclxuICAgICAgICAgICAgICAgIG5ld1Byb2plY3QudGFza3MgPSBwcm9qZWN0LnRhc2tzLm1hcCh0YXNrPT4oXHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihuZXcgY2xzLnRhc2ssdGFzaykpKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3UHJvamVjdCxwcm9qZWN0KSBcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLy8gc2F2aW5nIHRoZSBtYXN0ZXIgb2JqZWN0IHRvIGxvY2FsIHN0b3JhZ2VcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLm1hc3Rlck9iamVjdCA9IEpTT04uc3RyaW5naWZ5KG5ld01hc3Rlck9iamVjdClcclxuICAgICAgICAgICAgcmV0dXJuIG5ld01hc3Rlck9iamVjdFxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8ganVzdCB0byBtYWtlIHN1cmUgdGhlIHVzZXIgZGlkbnQgY2hhbmdlIHRoZSBsb2NhbCBzdG9yYWdlXHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVGaXJzdFRpbWVNYXN0ZXJPYmooKVxyXG4gICAgICAgIH1cclxuICAgIH0gZWxzZSB7ICAgIFxyXG4gICAgICAgIC8vIGp1c3QgdG8gbWFrZSBzdXJlIHRoZSB1c2VyIGRpZG50IGNoYW5nZSB0aGUgbG9jYWwgc3RvcmFnZVxyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZpcnN0VGltZU1hc3Rlck9iaigpXHJcbiAgICB9XHJcbn0pKCk7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2F2ZVByb2plY3QgKHByb2plY3QsbWFzdGVyT2JqKSB7XHJcbiAgICBtYXN0ZXJPYmoucHJvamVjdHMucHVzaChwcm9qZWN0KVxyXG4gICAgbG9jYWxTdG9yYWdlLm1hc3Rlck9iamVjdCA9IEpTT04uc3RyaW5naWZ5KG1hc3Rlck9iailcclxufSIsImltcG9ydCAqIGFzIGNyZWF0aW9uIGZyb20gXCIuL2RvbUNyZWF0aW9uXCJcclxuaW1wb3J0ICogYXMgZnVuYyBmcm9tIFwiLi9mdW5jdGlvblwiXHJcbmltcG9ydCAqIGFzIHN0ciBmcm9tIFwiLi9zdG9yYWdlXCJcclxuaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4vVUltYW5pdXB1bGF0aW9uXCJcclxuXHJcbi8vIGZvciB3aGVuIHRoZSB0aGUgdXNlciB3YW50cyB0byBjb25maXJtIHRoZWlyIHByb2plY3QgY3JlYXRpb25cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb2plY3QoZXZlbnQpIHtcclxuICAgIGNvbnN0IGlucHV0RmllbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXQjcHJvamVjdE5hbWVcIilcclxuICAgIGNvbnN0IHZhbHVlSW5mbyA9IGZ1bmMuY2hlY2tOYW1lVmFsaWRpdHkoaW5wdXRGaWVsZC52YWx1ZSlcclxuXHJcbiAgICAvLyBjb25zdCBcclxuICAgIGlmICghdmFsdWVJbmZvLnZhbGlkaXR5KSB7XHJcbiAgICAgICAgY29uc3QgZXJyb3JNc2cgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwic3Bhbi5wcm9qZWN0RXJvcnJNc2dcIilcclxuICAgICAgICBlcnJvck1zZy50ZXh0Q29udGVudCA9IHZhbHVlSW5mby5tZXNzYWdlO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCk9PntlcnJvck1zZy50ZXh0Q29udGVudD1cIlwifSwxMjAwKVxyXG4gICAgICAgIHJldHVyblxyXG4gICAgfVxyXG4gICAgLy8gcHJvamVjdCBjcmVhdGlvblxyXG4gICAgY29uc3QgbmV3UHJvamVjdCA9IGZ1bmMuY3JlYXRlUHJvamVjdChpbnB1dEZpZWxkLnZhbHVlKVxyXG4gICAgc3RyLnNhdmVQcm9qZWN0KG5ld1Byb2plY3Qsc3RyLm1hc3Rlck9iamVjdClcclxuICAgIGNvbnNvbGUubG9nKHN0ci5tYXN0ZXJPYmplY3QpXHJcbiAgICBVSS5hZGRQcm9qZWN0cyhuZXdQcm9qZWN0KVxyXG4gICAgLy8gZmluaXNoaW5nXHJcbiAgICBVSS5yZW1vdmVQcm9qZWN0Q3JlYXRpb24oKVxyXG5cclxufSIsImltcG9ydCAqIGFzIGNyZWF0aW9uIGZyb20gXCIuL2RvbUNyZWF0aW9uXCJcclxuaW1wb3J0ICogYXMgZnVuYyBmcm9tIFwiLi9mdW5jdGlvblwiXHJcbmltcG9ydCAqIGFzIGJ1bmRsZSBmcm9tIFwiLi9mdW5jdGlvbkJ1bmRsZXJcIlxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlNZW51KCkge1xyXG4gICAgY29uc3QgbWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtYWluI21haW5cIilcclxuICAgIGNvbnN0IHRhc2tDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhc2tDb250YWluZXJcIilcclxuICAgIG1haW4uY2xhc3NMaXN0LnRvZ2dsZShcIm1lbnVJc05vdEFjdGl2ZVwiKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGlzcGxheVByb2plY3RzKGV2ZW50KSB7XHJcbiAgICBjb25zdCBkcm9wRG93biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZHJvcERvd25cIilcclxuICAgIGNvbnN0IGNhcmV0U3ltYm9sID0gZXZlbnQudGFyZ2V0LmNoaWxkcmVuWzBdXHJcbiAgICBpZiAoZHJvcERvd24uc3R5bGUuZGlzcGxheSA9PSBcIm5vbmVcIikge1xyXG4gICAgICAgIGRyb3BEb3duLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIlxyXG4gICAgICAgIGNhcmV0U3ltYm9sLmNsYXNzTGlzdC50b2dnbGUoXCJmYS1jYXJldC1kb3duXCIpXHJcbiAgICAgICAgY2FyZXRTeW1ib2wuY2xhc3NMaXN0LnRvZ2dsZShcImZhLWNhcmV0LXVwXCIpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRyb3BEb3duLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIlxyXG4gICAgICAgIGNhcmV0U3ltYm9sLmNsYXNzTGlzdC50b2dnbGUoXCJmYS1jYXJldC1kb3duXCIpXHJcbiAgICAgICAgY2FyZXRTeW1ib2wuY2xhc3NMaXN0LnRvZ2dsZShcImZhLWNhcmV0LXVwXCIpXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkaXNwbGF5TW9kYWwoZXZlbnQpe1xyXG4gICAgY29uc3QgYmFja2dyb3VuZE1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtb2RhbEJhY2tncm91bmRcIilcclxuICAgIGJhY2tncm91bmRNb2RhbC5hcHBlbmRDaGlsZChjcmVhdGlvbi5jcmVhdGVUYXNrTW9kYWwoKSlcclxuXHJcbiAgICBjb25zdCBjcm9zcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZmEteFwiKVxyXG4gICAgY29uc3QgY2FuY2VsQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYW5jZWxUYXNrQnRuXCIpXHJcbiAgICBmdW5jLmFkZEV2ZW50KHJlbW92ZU1vZGFsLFwiY2xpY2tcIixjcm9zcyxjYW5jZWxCdG4pXHJcblxyXG4gICAgYmFja2dyb3VuZE1vZGFsLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIlxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlTW9kYWwoZXZlbnQpIHtcclxuICAgIGNvbnN0IGJhY2tncm91bmRNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbW9kYWxCYWNrZ3JvdW5kXCIpXHJcbiAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbFwiKVxyXG4gICAgY29uc3QgY2FuY2VsQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYW5jZWxUYXNrQnRuXCIpXHJcbiAgICBjb25zdCBjcm9zcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZmEteFwiKVxyXG5cclxuICAgIGZ1bmMucmVtb3ZlRXZlbnQocmVtb3ZlTW9kYWwsXCJjbGlja1wiLGNyb3NzLGNhbmNlbEJ0bilcclxuXHJcbiAgICBiYWNrZ3JvdW5kTW9kYWwucmVtb3ZlQ2hpbGQoZm9ybSlcclxuICAgIGJhY2tncm91bmRNb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCJcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlQcm9qZWN0Q3JlYXRpb24oZXZlbnQpIHtcclxuICAgIGNvbnN0IHByb2plY3RDcmVhdG9yID0gY3JlYXRpb24uY3JlYXRlUHJvamVjdENyZWF0b3IoKVxyXG4gICAgY29uc3QgcHJvamVjdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2plY3RzXCIpXHJcbiAgICBjb25zdCBhZGRQcm9qZWN0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGRQcm9qZWN0XCIpXHJcbiAgICBjb25zdCBkcm9wZG93biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZHJvcERvd25cIilcclxuICAgIGRyb3Bkb3duLmFwcGVuZENoaWxkKGNyZWF0aW9uLmNyZWF0ZVByb2plY3RDcmVhdG9yKCkpXHJcbiAgICAvLyAgYnV0dG9ucyBvbiBtb2RhbFxyXG4gICAgY29uc3QgY29uZmlybVByb2plY3RCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZFByb2plY3RCdG5cIilcclxuICAgIGNvbnN0IGNhbmNlbFByb2plY3RCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhbmNlbFByb2plY3RCdG5cIilcclxuXHJcbiAgICBjb25maXJtUHJvamVjdEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYnVuZGxlLmNyZWF0ZVByb2plY3QpXHJcbiAgICBjYW5jZWxQcm9qZWN0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCByZW1vdmVQcm9qZWN0Q3JlYXRpb24pXHJcblxyXG4gICAgcHJvamVjdHMuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXHJcbiAgICBhZGRQcm9qZWN0QnRuLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIlxyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVByb2plY3RDcmVhdGlvbihldmVudCkge1xyXG4gICAgY29uc3QgcHJvamVjdENyZWF0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2plY3RDcmVhdG9yXCIpXHJcbiAgICBjb25zdCBwcm9qZWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvamVjdHNcIilcclxuICAgIGNvbnN0IGFkZFByb2plY3RCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZFByb2plY3RcIilcclxuICAgIGNvbnN0IGRyb3Bkb3duID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kcm9wRG93blwiKSAgICBcclxuICAgIC8vICBidXR0b25zIG9uIG1vZGFsXHJcbiAgICBjb25zdCBjb25maXJtUHJvamVjdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkUHJvamVjdEJ0blwiKVxyXG4gICAgY29uc3QgY2FuY2VsUHJvamVjdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FuY2VsUHJvamVjdEJ0blwiKVxyXG5cclxuICAgIGNvbmZpcm1Qcm9qZWN0QnRuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBidW5kbGUuY3JlYXRlUHJvamVjdClcclxuICAgIGNhbmNlbFByb2plY3RCdG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIscmVtb3ZlUHJvamVjdENyZWF0aW9uKVxyXG5cclxuXHJcbiAgICBkcm9wZG93bi5yZW1vdmVDaGlsZChwcm9qZWN0Q3JlYXRvcilcclxuICAgIHByb2plY3RzLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIlxyXG4gICAgYWRkUHJvamVjdEJ0bi5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCJcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFkZFByb2plY3RzKC4uLnByb2plY3RzKSB7XHJcbiAgICBjb25zb2xlLmxvZyhwcm9qZWN0cylcclxuICAgIGNvbnN0IHByb2plY3RDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2plY3RzXCIpXHJcbiAgICBwcm9qZWN0cy5mb3JFYWNoKHByb2plY3Q9PntcclxuICAgICAgICBjb25zb2xlLmxvZyhwcm9qZWN0LnByb2plY3RIVE1MKVxyXG4gICAgICAgIHByb2plY3RDb250YWluZXIuYXBwZW5kQ2hpbGQocHJvamVjdC5wcm9qZWN0SFRNTClcclxuICAgIH0pXHJcbn0iLCJpbXBvcnQgKiBhcyBzdHIgZnJvbSBcIi4vbW9kdWxlcy9zdG9yYWdlXCJcclxuaW1wb3J0ICogYXMgVUkgZnJvbSBcIi4vbW9kdWxlcy9VSW1hbml1cHVsYXRpb25cIlxyXG5cclxuLy8gZWxlbWVudHNcclxuY29uc3QgbWVudUljb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1lbnVJY29uXCIpXHJcbmNvbnN0IHByb2plY3RzRHJvcGRvd24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2plY3RzVGl0bGVcIilcclxuY29uc3QgYWRkVGFza0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkVGFza1wiKVxyXG5jb25zdCBhZGRQcm9qZWN0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGRQcm9qZWN0XCIpXHJcbi8vIGV2ZW50IGxpc3RlbmVyc1xyXG5tZW51SWNvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiAsIFVJLmRpc3BsYXlNZW51KVxyXG5wcm9qZWN0c0Ryb3Bkb3duLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBVSS5kaXNwbGF5UHJvamVjdHMpXHJcbmFkZFRhc2tCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsVUkuZGlzcGxheU1vZGFsKVxyXG5hZGRQcm9qZWN0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLFVJLmRpc3BsYXlQcm9qZWN0Q3JlYXRpb24pXHJcblxyXG4iXSwibmFtZXMiOlsiY3JlYXRlUHJvamVjdENyZWF0b3IiLCJwcm9qZWN0Q3JlYXRvciIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImFkZCIsImlubmVySFRNTCIsIlByb2plY3QiLCJjb25zdHJ1Y3RvciIsInRpdGxlIiwidGhpcyIsInRhc2tzIiwicHJvamVjdEhUTUwiLCJwcm9qZWN0VGl0bGUiLCJhZGRUYXNrIiwidGFzayIsInB1c2giLCJyZW1vdmVUYXNrIiwidGFza0luZGV4Iiwic3BsaWNlIiwiZGVzY3JpcHRpb24iLCJwcmlvcml0eSIsImR1ZURhdGUiLCJwcm9qZWN0IiwiY29tcGxldGlvbiIsInRhc2tIVE1MIiwicHJvamVjdHMiLCJhbGxUYXNrcyIsInJlZHVjZSIsInRhc2tzQXJyYXkiLCJjb25jYXQiLCJjcmVhdGVGaXJzdFRpbWVNYXN0ZXJPYmoiLCJtYXN0ZXJPYmplY3QiLCJleGFtcGxlVGFzayIsImxvY2FsU3RvcmFnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJuZXdNYXN0ZXJPYmplY3QiLCJzdG9yZWRNYXN0ZXJPYmplY3QiLCJwYXJzZSIsIm1hcCIsIm5ld1Byb2plY3QiLCJPYmplY3QiLCJhc3NpZ24iLCJjbGVhciIsImV2ZW50IiwiaW5wdXRGaWVsZCIsInF1ZXJ5U2VsZWN0b3IiLCJ2YWx1ZUluZm8iLCJuYW1lIiwidmFsdWUiLCJ0ZXN0IiwidmFsaWRpdHkiLCJtZXNzYWdlIiwiZXJyb3JNc2ciLCJ0ZXh0Q29udGVudCIsInNldFRpbWVvdXQiLCJpbnB1dFZhbHVlIiwibWFzdGVyT2JqIiwiY29uc29sZSIsImxvZyIsInByb2plY3RDb250YWluZXIiLCJmb3JFYWNoIiwiYXBwZW5kQ2hpbGQiLCJyZW1vdmVNb2RhbCIsImJhY2tncm91bmRNb2RhbCIsImZvcm0iLCJjYW5jZWxCdG4iLCJmdW5jIiwiZWxlbWVudHMiLCJlbGVtZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJlbW92ZUNoaWxkIiwic3R5bGUiLCJkaXNwbGF5IiwicmVtb3ZlUHJvamVjdENyZWF0aW9uIiwiYWRkUHJvamVjdEJ0biIsImRyb3Bkb3duIiwiY29uZmlybVByb2plY3RCdG4iLCJjYW5jZWxQcm9qZWN0QnRuIiwibWVudUljb24iLCJwcm9qZWN0c0Ryb3Bkb3duIiwiYWRkVGFza0J0biIsImFkZEV2ZW50TGlzdGVuZXIiLCJtYWluIiwidG9nZ2xlIiwiZHJvcERvd24iLCJjYXJldFN5bWJvbCIsInRhcmdldCIsImNoaWxkcmVuIiwidGFza0NyZWF0b3IiXSwic291cmNlUm9vdCI6IiJ9