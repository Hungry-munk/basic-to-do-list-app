(()=>{"use strict";function e(){const e=document.createElement("div");return e.classList.add("projectCreator"),e.innerHTML='\n        <div>\n            <input id="projectName" type="text" placeholder="Project name...">\n            <span class="projectErorrMsg"></span>\n        </div>\n        <div>\n            <button class="projectBtn cancelProjectBtn">Cancel</button>\n            <button class="projectBtn addProjectBtn">Add Project</button>\n        </div>\n    ',e}class t{constructor(e){this.title=e,this.tasks=[]}get projectHTML(){return function(e){const t=document.createElement("div");return t.classList.add("project"),t.innerHTML=`\n        <i class="fa-solid fa-circle"></i>\n        <div class="projectTitle">${e}<div>\n        <i class="fa-solid fa-trash bin"></i>\n    `,t}(this.title)}addTask(e){this.tasks.push(e)}removeTask(e){this.tasks.splice(e,1)}}class n{constructor(e,t,n,o,c){this.title=e,this.description=t,this.priority=n,this.dueDate=o,this.project=c,this.completion=!1}get taskHTML(){}}class o{constructor(){this.projects=[]}get allTasks(){return this.projects.reduce(((e,t)=>e.concat(t.tasks)),[])}}function c(){const e=new o;e.projects.push(new t("Home"));const c=new n("exampleTask","testing please work","medium","12/12/12","Home");return e.projects[0].tasks.push(c),localStorage.masterObject=JSON.stringify(e),e}const s=(()=>{if("undefined"!=typeof Storage){if(localStorage.masterObject){const e=new o,c=JSON.parse(localStorage.masterObject);return e.projects=c.projects.map((e=>{const o=new t;return o.tasks=e.tasks.map((e=>Object.assign(new n,e))),Object.assign(o,e)})),localStorage.masterObject=JSON.stringify(e),e}return localStorage.clear(),c()}return localStorage.clear(),c()})();function r(e){const n=document.querySelector("input#projectName"),o=(c=n.value)?/^[1-9!@#$%^&*(),.?":{}|<>].*/g.test(c)?{validity:!1,message:"cant start with numbers or special character"}:{validity:!0,message:""}:{validity:!1,message:"cant enter empty name"};var c;if(!o.validity){const e=document.querySelector("span.projectErorrMsg");return e.textContent=o.message,void setTimeout((()=>{e.textContent=""}),1200)}const r=(a=n.value,new t(a));var a,i,d;i=r,(d=s).projects.push(i),localStorage.masterObject=JSON.stringify(d),console.log(s),function(...e){console.log(e);const t=document.querySelector(".projects");e.forEach((e=>{console.log(e.projectHTML),t.appendChild(e.projectHTML)}))}(r),l()}function a(e){const t=document.querySelector("#modalBackground"),n=document.querySelector(".modal"),o=document.querySelector(".cancelTaskBtn");!function(e,t,...n){n.forEach((n=>n.removeEventListener(t,e)))}(a,"click",document.querySelector(".fa-x"),o),t.removeChild(n),t.style.display="none"}function l(e){const t=document.querySelector(".projectCreator"),n=document.querySelector(".projects"),o=document.querySelector(".addProject"),c=document.querySelector(".dropDown"),s=document.querySelector(".addProjectBtn"),a=document.querySelector(".cancelProjectBtn");s.removeEventListener("click",r),a.removeEventListener("click",l),c.removeChild(t),n.style.display="block",o.style.display="block"}const i=document.querySelector(".menuIcon"),d=document.querySelector(".projectsTitle"),u=document.querySelector(".addTask"),p=document.querySelector(".addProject");i.addEventListener("click",(function(){const e=document.querySelector("main#main");document.querySelector(".taskContainer"),e.classList.toggle("menuIsNotActive")})),d.addEventListener("click",(function(e){const t=document.querySelector(".dropDown"),n=e.target.children[0];"none"==t.style.display?(t.style.display="block",n.classList.toggle("fa-caret-down"),n.classList.toggle("fa-caret-up")):(t.style.display="none",n.classList.toggle("fa-caret-down"),n.classList.toggle("fa-caret-up"))})),u.addEventListener("click",(function(e){const t=document.querySelector("#modalBackground");t.appendChild(function(){const e=document.createElement("div");return e.classList.add("modal"),e.innerHTML='\n        <div class="taskCreationHeader modalHeader">\n            <div>New Task</div>\n            <i class="fa-solid fa-x"></i>\n        </div>\n        <form class="taskCreationForm">\n            <div class="taskDetails1">\n                <label for="taskTitle">Title:</label>\n                <input class="taskEntry" type="text" id="taskTitle" placeholder="e.g. Pay bills" spellcheck = "true">\n                <span class="errorMsg"></span>\n\n                <label for="taskDescription">Description:</label>\n                <textarea class="taskEntry" id="taskDescription" placeholder="e.g. internet, phone, rent, etc" spellcheck = "true"></textarea>\n\n            </div>\n            <div class="taskDetails2">\n                <label for="dueDate">Due Date:</label>\n                <input type="datetime-local" class="taskEntry" id="dueDate">\n\n                <label for="priority">Priority:</label>\n                <select id="priority" class="taskEntry">\n                    <option value="none" selected>None</option>\n                    <option value="low">Low</option>\n                    <option value="medium">Medium</option>\n                    <option value="high">High</option>\n                </select>\n\n                <label for="projectSelection">Project:</label>\n                <select id="projectSelection" class="taskEntry">\n                \n                </select>\n            </div>\n            <div class="taskCreationDecision">\n                <button type="button" class="cancelTaskBtn modalBtn cancelModalBtn">Cancel</button>\n                <button type="button" class="addTaskBtn modalBtn addModalBtn">Add task</button>\n            </div>\n\n        </form>\n\n    ',e}()),function(e,t,...n){n.forEach((n=>n.addEventListener(t,e)))}(a,"click",document.querySelector(".fa-x"),document.querySelector(".cancelTaskBtn")),t.style.display="flex"})),p.addEventListener("click",(function(t){e();const n=document.querySelector(".projects"),o=document.querySelector(".addProject");document.querySelector(".dropDown").appendChild(e());const c=document.querySelector(".addProjectBtn"),s=document.querySelector(".cancelProjectBtn");c.addEventListener("click",r),s.addEventListener("click",l),n.style.display="none",o.style.display="none"}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U0FBUzZDLGNBQWMsYUFDL0JnQixZQUFZLEtBRXJCLE1BQU1lLEVBQW9CNUUsU0FBUzZDLGNBQWMsa0JBQzNDZ0MsRUFBbUI3RSxTQUFTNkMsY0FBYyxxQkFFaEQrQixFQUFrQkssaUJBQWlCLFFBQVMsR0FDNUNKLEVBQWlCSSxpQkFBaUIsUUFBU1IsR0FFM0NqRCxFQUFTK0MsTUFBTUMsUUFBVSxPQUN6QkUsRUFBY0gsTUFBTUMsUUFBVSxNQUVsQyxHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9zcmMvbW9kdWxlcy9kb21DcmVhdGlvbi5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL3NyYy9tb2R1bGVzL2NsYXNzZXMuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9zcmMvbW9kdWxlcy9mdW5jdGlvbi5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL3NyYy9tb2R1bGVzL3N0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9zcmMvbW9kdWxlcy9mdW5jdGlvbkJ1bmRsZXIuanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9zcmMvbW9kdWxlcy9VSW1hbml1cHVsYXRpb24uanMiLCJ3ZWJwYWNrOi8vdG8tZG8tbGlzdC1hcHAvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUYXNrTW9kYWwoKXtcclxuICAgIGNvbnN0IHRhc2tDcmVhdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxyXG4gICAgdGFza0NyZWF0b3IuY2xhc3NMaXN0LmFkZChcIm1vZGFsXCIpXHJcbiAgICB0YXNrQ3JlYXRvci5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInRhc2tDcmVhdGlvbkhlYWRlciBtb2RhbEhlYWRlclwiPlxyXG4gICAgICAgICAgICA8ZGl2Pk5ldyBUYXNrPC9kaXY+XHJcbiAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEtc29saWQgZmEteFwiPjwvaT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8Zm9ybSBjbGFzcz1cInRhc2tDcmVhdGlvbkZvcm1cIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhc2tEZXRhaWxzMVwiPlxyXG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cInRhc2tUaXRsZVwiPlRpdGxlOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJ0YXNrRW50cnlcIiB0eXBlPVwidGV4dFwiIGlkPVwidGFza1RpdGxlXCIgcGxhY2Vob2xkZXI9XCJlLmcuIFBheSBiaWxsc1wiIHNwZWxsY2hlY2sgPSBcInRydWVcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JNc2dcIj48L3NwYW4+XHJcblxyXG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cInRhc2tEZXNjcmlwdGlvblwiPkRlc2NyaXB0aW9uOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XCJ0YXNrRW50cnlcIiBpZD1cInRhc2tEZXNjcmlwdGlvblwiIHBsYWNlaG9sZGVyPVwiZS5nLiBpbnRlcm5ldCwgcGhvbmUsIHJlbnQsIGV0Y1wiIHNwZWxsY2hlY2sgPSBcInRydWVcIj48L3RleHRhcmVhPlxyXG5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YXNrRGV0YWlsczJcIj5cclxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJkdWVEYXRlXCI+RHVlIERhdGU6PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiBjbGFzcz1cInRhc2tFbnRyeVwiIGlkPVwiZHVlRGF0ZVwiPlxyXG5cclxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJwcmlvcml0eVwiPlByaW9yaXR5OjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8c2VsZWN0IGlkPVwicHJpb3JpdHlcIiBjbGFzcz1cInRhc2tFbnRyeVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJub25lXCIgc2VsZWN0ZWQ+Tm9uZTwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJsb3dcIj5Mb3c8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwibWVkaXVtXCI+TWVkaXVtPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImhpZ2hcIj5IaWdoPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuXHJcbiAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPVwicHJvamVjdFNlbGVjdGlvblwiPlByb2plY3Q6PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9XCJwcm9qZWN0U2VsZWN0aW9uXCIgY2xhc3M9XCJ0YXNrRW50cnlcIj5cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFza0NyZWF0aW9uRGVjaXNpb25cIj5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2FuY2VsVGFza0J0biBtb2RhbEJ0biBjYW5jZWxNb2RhbEJ0blwiPkNhbmNlbDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJhZGRUYXNrQnRuIG1vZGFsQnRuIGFkZE1vZGFsQnRuXCI+QWRkIHRhc2s8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDwvZm9ybT5cclxuXHJcbiAgICBgXHJcblxyXG4gICAgcmV0dXJuIHRhc2tDcmVhdG9yXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm9qZWN0Q3JlYXRvciAoKSB7XHJcbiAgICBjb25zdCBwcm9qZWN0Q3JlYXRvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcclxuICAgIHByb2plY3RDcmVhdG9yLmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0Q3JlYXRvclwiKVxyXG4gICAgcHJvamVjdENyZWF0b3IuaW5uZXJIVE1MID0gYFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxpbnB1dCBpZD1cInByb2plY3ROYW1lXCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIlByb2plY3QgbmFtZS4uLlwiPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInByb2plY3RFcm9yck1zZ1wiPjwvc3Bhbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwicHJvamVjdEJ0biBjYW5jZWxQcm9qZWN0QnRuXCI+Q2FuY2VsPC9idXR0b24+XHJcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJwcm9qZWN0QnRuIGFkZFByb2plY3RCdG5cIj5BZGQgUHJvamVjdDwvYnV0dG9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgYFxyXG4gICAgcmV0dXJuIHByb2plY3RDcmVhdG9yXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm9qZWN0KHByb2plY3RUaXRsZSkge1xyXG4gICAgY29uc3QgcHJvamVjdEhUTUwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXHJcbiAgICBwcm9qZWN0SFRNTC5jbGFzc0xpc3QuYWRkKFwicHJvamVjdFwiKVxyXG4gICAgcHJvamVjdEhUTUwuaW5uZXJIVE1MID0gYFxyXG4gICAgICAgIDxpIGNsYXNzPVwiZmEtc29saWQgZmEtY2lyY2xlXCI+PC9pPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJwcm9qZWN0VGl0bGVcIj4ke3Byb2plY3RUaXRsZX08ZGl2PlxyXG4gICAgICAgIDxpIGNsYXNzPVwiZmEtc29saWQgZmEtdHJhc2ggYmluXCI+PC9pPlxyXG4gICAgYFxyXG4gICAgcmV0dXJuIHByb2plY3RIVE1MXHJcbn0iLCJpbXBvcnQgKiBhcyBjcmVhdGlvbiBmcm9tIFwiLi9kb21DcmVhdGlvblwiXHJcblxyXG5leHBvcnQgY2xhc3MgUHJvamVjdCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0aXRsZSkge1xyXG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZVxyXG4gICAgICAgIHRoaXMudGFza3MgPSBbXVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBnZXQgcHJvamVjdEhUTUwgKCkge1xyXG4gICAgICAgIHJldHVybiBjcmVhdGlvbi5jcmVhdGVQcm9qZWN0KHRoaXMudGl0bGUpXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGFkZFRhc2sodGFzayl7XHJcbiAgICAgICAgdGhpcy50YXNrcy5wdXNoKHRhc2spXHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlVGFzayh0YXNrSW5kZXgpIHtcclxuICAgICAgICB0aGlzLnRhc2tzLnNwbGljZSh0YXNrSW5kZXgsIDEpXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgdGFzayB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0aXRsZSxkZXNjcmlwdGlvbixwcmlvcml0eSxkdWVEYXRlLHByb2plY3QpIHtcclxuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xyXG4gICAgICAgIHRoaXMucHJpb3JpdHk9IHByaW9yaXR5O1xyXG4gICAgICAgIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGU7XHJcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdFxyXG4gICAgICAgIHRoaXMuY29tcGxldGlvbiA9ICBmYWxzZTtcclxuICAgIH1cclxuICAgICBcclxuICAgIGdldCB0YXNrSFRNTCAoKSB7XHJcbiAgICAgICAgcmV0dXJuIFxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgbWFzdGVyT2JqZWN0IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMucHJvamVjdHMgPSBbXVxyXG4gICAgfVxyXG5cclxuICAgIGdldCBhbGxUYXNrcygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wcm9qZWN0cy5yZWR1Y2UoKHRhc2tzQXJyYXkscHJvamVjdCk9PihcclxuICAgICAgICAgICAgdGFza3NBcnJheS5jb25jYXQocHJvamVjdC50YXNrcykpLFtdKVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuIiwiaW1wb3J0ICogYXMgY2xzIGZyb20gXCIuL2NsYXNzZXNcIjtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGaXJzdFRpbWVNYXN0ZXJPYmooKSB7XHJcbiAgICAvLyBjcmVhdGluZyBtYXN0ZXIgb2JqZWN0XHJcbiAgICBjb25zdCBtYXN0ZXJPYmplY3QgPSBuZXcgY2xzLm1hc3Rlck9iamVjdCgpXHJcbiAgICAvLyBhZGRpbmcgaG9tZSBwcm9qZWN0XHJcbiAgICBtYXN0ZXJPYmplY3QucHJvamVjdHMucHVzaChuZXcgY2xzLlByb2plY3QoXCJIb21lXCIpKVxyXG4gICAgLy8gYWRkaW5nIGV4YW1wbGUgdGFza1xyXG4gICAgY29uc3QgZXhhbXBsZVRhc2sgPSBuZXcgY2xzLnRhc2soXCJleGFtcGxlVGFza1wiLFwidGVzdGluZyBwbGVhc2Ugd29ya1wiLCBcIm1lZGl1bVwiLFwiMTIvMTIvMTJcIixcIkhvbWVcIilcclxuICAgIG1hc3Rlck9iamVjdC5wcm9qZWN0c1swXS50YXNrcy5wdXNoKGV4YW1wbGVUYXNrKVxyXG4gICAgbG9jYWxTdG9yYWdlLm1hc3Rlck9iamVjdCA9IEpTT04uc3RyaW5naWZ5KG1hc3Rlck9iamVjdCkgICAgXHJcbiAgICByZXR1cm4gbWFzdGVyT2JqZWN0XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRFdmVudCAoZnVuYyxldmVudCwgLi4uZWxlbWVudHMgKSB7XHJcbiAgICBlbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQ9PmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCxmdW5jKSl9O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUV2ZW50IChmdW5jLGV2ZW50LCAuLi5lbGVtZW50cyApIHtcclxuICAgIGVsZW1lbnRzLmZvckVhY2goZWxlbWVudD0+IGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCxmdW5jKSl9O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb2plY3QoaW5wdXRWYWx1ZSl7XHJcbiAgICBjb25zdCBuZXdQcm9qZWN0ID0gbmV3IGNscy5Qcm9qZWN0KGlucHV0VmFsdWUpXHJcbiAgICAvLyAgZm9yIGV4cGFuc2lvbiBpZiBuZWVkZWRcclxuICAgIHJldHVybiBuZXdQcm9qZWN0XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjaGVja05hbWVWYWxpZGl0eShuYW1lKSB7XHJcbiAgICBjb25zdCBJbnZhbGlkUGF0dGVybiA9IC9eWzEtOSFAIyQlXiYqKCksLj9cIjp7fXw8Pl0uKi9nXHJcbiAgICBpZiAoIW5hbWUpIHJldHVybiB7XHJcbiAgICAgICAgICAgIHZhbGlkaXR5OmZhbHNlLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiBcImNhbnQgZW50ZXIgZW1wdHkgbmFtZVwiXHJcbiAgICAgICAgfSBcclxuICAgIGVsc2UgaWYgKEludmFsaWRQYXR0ZXJuLnRlc3QobmFtZSkpIHJldHVybiB7XHJcbiAgICAgICAgdmFsaWRpdHk6ZmFsc2UsXHJcbiAgICAgICAgbWVzc2FnZTogXCJjYW50IHN0YXJ0IHdpdGggbnVtYmVycyBvciBzcGVjaWFsIGNoYXJhY3RlclwiXHJcbiAgICB9XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHZhbGlkaXR5OnRydWUsXHJcbiAgICAgICAgbWVzc2FnZSA6IFwiXCJcclxuICAgIH1cclxufSIsImltcG9ydCB7Y3JlYXRlRmlyc3RUaW1lTWFzdGVyT2JqfSBmcm9tIFwiLi9mdW5jdGlvblwiXHJcbmltcG9ydCAqIGFzIGNscyBmcm9tIFwiLi9jbGFzc2VzXCJcclxuXHJcbmV4cG9ydCBjb25zdCBtYXN0ZXJPYmplY3QgPSAoKCk9PntcclxuICAgIGlmICh0eXBlb2YoU3RvcmFnZSkgIT09IFwidW5kZWZpbmVkXCIpIHtcclxuICAgICAgICBpZiAobG9jYWxTdG9yYWdlLm1hc3Rlck9iamVjdCkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdNYXN0ZXJPYmplY3QgPSBuZXcgY2xzLm1hc3Rlck9iamVjdCgpXHJcbiAgICAgICAgICAgIGNvbnN0IHN0b3JlZE1hc3Rlck9iamVjdCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLm1hc3Rlck9iamVjdClcclxuICAgICAgICAgICAgLy8gdHJhbnNmZXJpbmcgYWxsIHByb2plY3RzIGFuZCB0YXNrc1xyXG4gICAgICAgICAgICBuZXdNYXN0ZXJPYmplY3QucHJvamVjdHMgPSBzdG9yZWRNYXN0ZXJPYmplY3QucHJvamVjdHMubWFwKHByb2plY3Q9PntcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1Byb2plY3QgPSBuZXcgY2xzLlByb2plY3QoKVxyXG4gICAgICAgICAgICAgICAgbmV3UHJvamVjdC50YXNrcyA9IHByb2plY3QudGFza3MubWFwKHRhc2s9PihcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKG5ldyBjbHMudGFzayx0YXNrKSkpXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihuZXdQcm9qZWN0LHByb2plY3QpIFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAvLyBzYXZpbmcgdGhlIG1hc3RlciBvYmplY3QgdG8gbG9jYWwgc3RvcmFnZVxyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UubWFzdGVyT2JqZWN0ID0gSlNPTi5zdHJpbmdpZnkobmV3TWFzdGVyT2JqZWN0KVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3TWFzdGVyT2JqZWN0XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBqdXN0IHRvIG1ha2Ugc3VyZSB0aGUgdXNlciBkaWRudCBjaGFuZ2UgdGhlIGxvY2FsIHN0b3JhZ2VcclxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLmNsZWFyKCkgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUZpcnN0VGltZU1hc3Rlck9iaigpXHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHsgICAgXHJcbiAgICAgICAgLy8ganVzdCB0byBtYWtlIHN1cmUgdGhlIHVzZXIgZGlkbnQgY2hhbmdlIHRoZSBsb2NhbCBzdG9yYWdlXHJcbiAgICAgICAgbG9jYWxTdG9yYWdlLmNsZWFyKCkgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICByZXR1cm4gY3JlYXRlRmlyc3RUaW1lTWFzdGVyT2JqKClcclxuICAgIH1cclxufSkoKTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzYXZlUHJvamVjdCAocHJvamVjdCxtYXN0ZXJPYmopIHtcclxuICAgIG1hc3Rlck9iai5wcm9qZWN0cy5wdXNoKHByb2plY3QpXHJcbiAgICBsb2NhbFN0b3JhZ2UubWFzdGVyT2JqZWN0ID0gSlNPTi5zdHJpbmdpZnkobWFzdGVyT2JqKVxyXG59IiwiaW1wb3J0ICogYXMgY3JlYXRpb24gZnJvbSBcIi4vZG9tQ3JlYXRpb25cIlxyXG5pbXBvcnQgKiBhcyBmdW5jIGZyb20gXCIuL2Z1bmN0aW9uXCJcclxuaW1wb3J0ICogYXMgc3RyIGZyb20gXCIuL3N0b3JhZ2VcIlxyXG5pbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi9VSW1hbml1cHVsYXRpb25cIlxyXG5cclxuLy8gZm9yIHdoZW4gdGhlIHRoZSB1c2VyIHdhbnRzIHRvIGNvbmZpcm0gdGhlaXIgcHJvamVjdCBjcmVhdGlvblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUHJvamVjdChldmVudCkge1xyXG4gICAgY29uc3QgaW5wdXRGaWVsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dCNwcm9qZWN0TmFtZVwiKVxyXG4gICAgY29uc3QgdmFsdWVJbmZvID0gZnVuYy5jaGVja05hbWVWYWxpZGl0eShpbnB1dEZpZWxkLnZhbHVlKVxyXG5cclxuICAgIC8vIGNvbnN0IFxyXG4gICAgaWYgKCF2YWx1ZUluZm8udmFsaWRpdHkpIHtcclxuICAgICAgICBjb25zdCBlcnJvck1zZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzcGFuLnByb2plY3RFcm9yck1zZ1wiKVxyXG4gICAgICAgIGVycm9yTXNnLnRleHRDb250ZW50ID0gdmFsdWVJbmZvLm1lc3NhZ2U7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKT0+e2Vycm9yTXNnLnRleHRDb250ZW50PVwiXCJ9LDEyMDApXHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICAvLyBwcm9qZWN0IGNyZWF0aW9uXHJcbiAgICBjb25zdCBuZXdQcm9qZWN0ID0gZnVuYy5jcmVhdGVQcm9qZWN0KGlucHV0RmllbGQudmFsdWUpXHJcbiAgICBzdHIuc2F2ZVByb2plY3QobmV3UHJvamVjdCxzdHIubWFzdGVyT2JqZWN0KVxyXG4gICAgY29uc29sZS5sb2coc3RyLm1hc3Rlck9iamVjdClcclxuICAgIFVJLmFkZFByb2plY3RzKG5ld1Byb2plY3QpXHJcbiAgICAvLyBmaW5pc2hpbmdcclxuICAgIFVJLnJlbW92ZVByb2plY3RDcmVhdGlvbigpXHJcblxyXG59IiwiaW1wb3J0ICogYXMgY3JlYXRpb24gZnJvbSBcIi4vZG9tQ3JlYXRpb25cIlxyXG5pbXBvcnQgKiBhcyBmdW5jIGZyb20gXCIuL2Z1bmN0aW9uXCJcclxuaW1wb3J0ICogYXMgYnVuZGxlIGZyb20gXCIuL2Z1bmN0aW9uQnVuZGxlclwiXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGlzcGxheU1lbnUoKSB7XHJcbiAgICBjb25zdCBtYWluID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIm1haW4jbWFpblwiKVxyXG4gICAgY29uc3QgdGFza0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIudGFza0NvbnRhaW5lclwiKVxyXG4gICAgbWFpbi5jbGFzc0xpc3QudG9nZ2xlKFwibWVudUlzTm90QWN0aXZlXCIpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkaXNwbGF5UHJvamVjdHMoZXZlbnQpIHtcclxuICAgIGNvbnN0IGRyb3BEb3duID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kcm9wRG93blwiKVxyXG4gICAgY29uc3QgY2FyZXRTeW1ib2wgPSBldmVudC50YXJnZXQuY2hpbGRyZW5bMF1cclxuICAgIGlmIChkcm9wRG93bi5zdHlsZS5kaXNwbGF5ID09IFwibm9uZVwiKSB7XHJcbiAgICAgICAgZHJvcERvd24uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIlxyXG4gICAgICAgIGNhcmV0U3ltYm9sLmNsYXNzTGlzdC50b2dnbGUoXCJmYS1jYXJldC1kb3duXCIpXHJcbiAgICAgICAgY2FyZXRTeW1ib2wuY2xhc3NMaXN0LnRvZ2dsZShcImZhLWNhcmV0LXVwXCIpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGRyb3BEb3duLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIlxyXG4gICAgICAgIGNhcmV0U3ltYm9sLmNsYXNzTGlzdC50b2dnbGUoXCJmYS1jYXJldC1kb3duXCIpXHJcbiAgICAgICAgY2FyZXRTeW1ib2wuY2xhc3NMaXN0LnRvZ2dsZShcImZhLWNhcmV0LXVwXCIpXHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkaXNwbGF5TW9kYWwoZXZlbnQpe1xyXG4gICAgY29uc3QgYmFja2dyb3VuZE1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtb2RhbEJhY2tncm91bmRcIilcclxuICAgIGJhY2tncm91bmRNb2RhbC5hcHBlbmRDaGlsZChjcmVhdGlvbi5jcmVhdGVUYXNrTW9kYWwoKSlcclxuXHJcbiAgICBjb25zdCBjcm9zcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZmEteFwiKVxyXG4gICAgY29uc3QgY2FuY2VsQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYW5jZWxUYXNrQnRuXCIpXHJcbiAgICBmdW5jLmFkZEV2ZW50KHJlbW92ZU1vZGFsLFwiY2xpY2tcIixjcm9zcyxjYW5jZWxCdG4pXHJcblxyXG4gICAgYmFja2dyb3VuZE1vZGFsLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIlxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlTW9kYWwoZXZlbnQpIHtcclxuICAgIGNvbnN0IGJhY2tncm91bmRNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbW9kYWxCYWNrZ3JvdW5kXCIpXHJcbiAgICBjb25zdCBmb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5tb2RhbFwiKVxyXG4gICAgY29uc3QgY2FuY2VsQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYW5jZWxUYXNrQnRuXCIpXHJcbiAgICBjb25zdCBjcm9zcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZmEteFwiKVxyXG5cclxuICAgIGZ1bmMucmVtb3ZlRXZlbnQocmVtb3ZlTW9kYWwsXCJjbGlja1wiLGNyb3NzLGNhbmNlbEJ0bilcclxuXHJcbiAgICBiYWNrZ3JvdW5kTW9kYWwucmVtb3ZlQ2hpbGQoZm9ybSlcclxuICAgIGJhY2tncm91bmRNb2RhbC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCJcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlQcm9qZWN0Q3JlYXRpb24oZXZlbnQpIHtcclxuICAgIGNvbnN0IHByb2plY3RDcmVhdG9yID0gY3JlYXRpb24uY3JlYXRlUHJvamVjdENyZWF0b3IoKVxyXG4gICAgY29uc3QgcHJvamVjdHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2plY3RzXCIpXHJcbiAgICBjb25zdCBhZGRQcm9qZWN0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGRQcm9qZWN0XCIpXHJcbiAgICBjb25zdCBkcm9wZG93biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuZHJvcERvd25cIilcclxuICAgIGRyb3Bkb3duLmFwcGVuZENoaWxkKGNyZWF0aW9uLmNyZWF0ZVByb2plY3RDcmVhdG9yKCkpXHJcbiAgICAvLyAgYnV0dG9ucyBvbiBtb2RhbFxyXG4gICAgY29uc3QgY29uZmlybVByb2plY3RCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZFByb2plY3RCdG5cIilcclxuICAgIGNvbnN0IGNhbmNlbFByb2plY3RCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhbmNlbFByb2plY3RCdG5cIilcclxuXHJcbiAgICBjb25maXJtUHJvamVjdEJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgYnVuZGxlLmNyZWF0ZVByb2plY3QpXHJcbiAgICBjYW5jZWxQcm9qZWN0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCByZW1vdmVQcm9qZWN0Q3JlYXRpb24pXHJcblxyXG4gICAgcHJvamVjdHMuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXHJcbiAgICBhZGRQcm9qZWN0QnRuLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIlxyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVByb2plY3RDcmVhdGlvbihldmVudCkge1xyXG4gICAgY29uc3QgcHJvamVjdENyZWF0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2plY3RDcmVhdG9yXCIpXHJcbiAgICBjb25zdCBwcm9qZWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvamVjdHNcIilcclxuICAgIGNvbnN0IGFkZFByb2plY3RCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZFByb2plY3RcIilcclxuICAgIGNvbnN0IGRyb3Bkb3duID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kcm9wRG93blwiKSAgICBcclxuICAgIC8vICBidXR0b25zIG9uIG1vZGFsXHJcbiAgICBjb25zdCBjb25maXJtUHJvamVjdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkUHJvamVjdEJ0blwiKVxyXG4gICAgY29uc3QgY2FuY2VsUHJvamVjdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FuY2VsUHJvamVjdEJ0blwiKVxyXG5cclxuICAgIGNvbmZpcm1Qcm9qZWN0QnRuLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBidW5kbGUuY3JlYXRlUHJvamVjdClcclxuICAgIGNhbmNlbFByb2plY3RCdG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIscmVtb3ZlUHJvamVjdENyZWF0aW9uKVxyXG5cclxuXHJcbiAgICBkcm9wZG93bi5yZW1vdmVDaGlsZChwcm9qZWN0Q3JlYXRvcilcclxuICAgIHByb2plY3RzLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCJcclxuICAgIGFkZFByb2plY3RCdG4uc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIlxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkUHJvamVjdHMoLi4ucHJvamVjdHMpIHtcclxuICAgIGNvbnNvbGUubG9nKHByb2plY3RzKVxyXG4gICAgY29uc3QgcHJvamVjdENvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvamVjdHNcIilcclxuICAgIHByb2plY3RzLmZvckVhY2gocHJvamVjdD0+e1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHByb2plY3QucHJvamVjdEhUTUwpXHJcbiAgICAgICAgcHJvamVjdENvbnRhaW5lci5hcHBlbmRDaGlsZChwcm9qZWN0LnByb2plY3RIVE1MKVxyXG4gICAgfSlcclxufSIsImltcG9ydCAqIGFzIHN0ciBmcm9tIFwiLi9tb2R1bGVzL3N0b3JhZ2VcIlxyXG5pbXBvcnQgKiBhcyBVSSBmcm9tIFwiLi9tb2R1bGVzL1VJbWFuaXVwdWxhdGlvblwiXHJcblxyXG4vLyBlbGVtZW50c1xyXG5jb25zdCBtZW51SWNvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIubWVudUljb25cIilcclxuY29uc3QgcHJvamVjdHNEcm9wZG93biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvamVjdHNUaXRsZVwiKVxyXG5jb25zdCBhZGRUYXNrQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGRUYXNrXCIpXHJcbmNvbnN0IGFkZFByb2plY3RCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZFByb2plY3RcIilcclxuLy8gZXZlbnQgbGlzdGVuZXJzXHJcbm1lbnVJY29uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiICwgVUkuZGlzcGxheU1lbnUpXHJcbnByb2plY3RzRHJvcGRvd24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIFVJLmRpc3BsYXlQcm9qZWN0cylcclxuYWRkVGFza0J0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixVSS5kaXNwbGF5TW9kYWwpXHJcbmFkZFByb2plY3RCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsVUkuZGlzcGxheVByb2plY3RDcmVhdGlvbilcclxuXHJcbiJdLCJuYW1lcyI6WyJjcmVhdGVQcm9qZWN0Q3JlYXRvciIsInByb2plY3RDcmVhdG9yIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiaW5uZXJIVE1MIiwiUHJvamVjdCIsImNvbnN0cnVjdG9yIiwidGl0bGUiLCJ0aGlzIiwidGFza3MiLCJwcm9qZWN0SFRNTCIsInByb2plY3RUaXRsZSIsImFkZFRhc2siLCJ0YXNrIiwicHVzaCIsInJlbW92ZVRhc2siLCJ0YXNrSW5kZXgiLCJzcGxpY2UiLCJkZXNjcmlwdGlvbiIsInByaW9yaXR5IiwiZHVlRGF0ZSIsInByb2plY3QiLCJjb21wbGV0aW9uIiwidGFza0hUTUwiLCJwcm9qZWN0cyIsImFsbFRhc2tzIiwicmVkdWNlIiwidGFza3NBcnJheSIsImNvbmNhdCIsImNyZWF0ZUZpcnN0VGltZU1hc3Rlck9iaiIsIm1hc3Rlck9iamVjdCIsImV4YW1wbGVUYXNrIiwibG9jYWxTdG9yYWdlIiwiSlNPTiIsInN0cmluZ2lmeSIsIm5ld01hc3Rlck9iamVjdCIsInN0b3JlZE1hc3Rlck9iamVjdCIsInBhcnNlIiwibWFwIiwibmV3UHJvamVjdCIsIk9iamVjdCIsImFzc2lnbiIsImNsZWFyIiwiZXZlbnQiLCJpbnB1dEZpZWxkIiwicXVlcnlTZWxlY3RvciIsInZhbHVlSW5mbyIsIm5hbWUiLCJ2YWx1ZSIsInRlc3QiLCJ2YWxpZGl0eSIsIm1lc3NhZ2UiLCJlcnJvck1zZyIsInRleHRDb250ZW50Iiwic2V0VGltZW91dCIsImlucHV0VmFsdWUiLCJtYXN0ZXJPYmoiLCJjb25zb2xlIiwibG9nIiwicHJvamVjdENvbnRhaW5lciIsImZvckVhY2giLCJhcHBlbmRDaGlsZCIsInJlbW92ZU1vZGFsIiwiYmFja2dyb3VuZE1vZGFsIiwiZm9ybSIsImNhbmNlbEJ0biIsImZ1bmMiLCJlbGVtZW50cyIsImVsZW1lbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlQ2hpbGQiLCJzdHlsZSIsImRpc3BsYXkiLCJyZW1vdmVQcm9qZWN0Q3JlYXRpb24iLCJhZGRQcm9qZWN0QnRuIiwiZHJvcGRvd24iLCJjb25maXJtUHJvamVjdEJ0biIsImNhbmNlbFByb2plY3RCdG4iLCJtZW51SWNvbiIsInByb2plY3RzRHJvcGRvd24iLCJhZGRUYXNrQnRuIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm1haW4iLCJ0b2dnbGUiLCJkcm9wRG93biIsImNhcmV0U3ltYm9sIiwidGFyZ2V0IiwiY2hpbGRyZW4iLCJ0YXNrQ3JlYXRvciJdLCJzb3VyY2VSb290IjoiIn0=