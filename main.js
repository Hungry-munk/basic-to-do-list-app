(()=>{"use strict";function e(){const e=document.createElement("div");return e.classList.add("projectCreator"),e.innerHTML='\n        <div>\n            <input id="projectName" type="text" placeholder="Project name...">\n            <span class="projectErorrMsg"></span>\n        </div>\n        <div>\n            <button class="projectBtn cancelProjectBtn">Cancel</button>\n            <button class="projectBtn addProjectBtn">Add Project</button>\n        </div>\n    ',e}class t{constructor(e){this.title=e,this.tasks=[]}get projectHTML(){return function(e){const t=document.createElement("div");return t.classList.add("project"),t.innerHTML=`\n        <i class="fa-solid fa-circle"></i>\n        <div class="projectTitle">${e}</div>\n        <div class="taskCounter"></div>\n        <i class="fa-solid fa-trash bin"></i>\n    `,t}(this.title)}addTask(e){this.tasks.push(e)}removeTask(e){this.tasks.splice(e,1)}}class n{constructor(e,t,n,o,r){this.title=e,this.description=t,this.priority=n,this.dueDate=o,this.project=r,this.completion=!1}get taskHTML(){return function(e,t,n,o,r){const c=document.createElement("div");return c.setAttribute("project",`${o}`),c.classList.add("task"),r&&c.classList.add("completed"),c.innerHTML=`\n        <i class="fa-regular fa-square ${t} "></i>\n        <div class="taskTitle">${e}</div>\n        <button class="taskDetails">Details</button>\n        <div class="taskDate">${n}</div>\n        <i class="fa-solid fa-pen-to-square edit"></i>\n        <i class="fa-solid fa-trash bin"></i>\n    `,c}(this.title,this.priority,this.dueDate,this.project,this.completion)}}class o{constructor(){this.projects=[],this.currentProject="Home"}get tasks(){return this.projects.reduce(((e,t)=>e.concat(t.tasks)),[])}changeCurrentProject(e){this.currentProject=e}}function r(){const e=new o;e.projects.push(new t("Home"));const r=new n("exampleTask","testing please work","medium","12/12/12","Home");return e.projects[0].tasks.push(r),localStorage.masterObject=JSON.stringify(e),e}function c(e){const t=a.projects.indexOf(this);if(-1!=t){a.projects.splice(t,1),e.target.removeEventListener("click",c);const n=document.querySelector(".projects"),o=e.target.parentElement;n.removeChild(o),localStorage.masterObject=JSON.stringify(a)}}function s(e){return e?/^[1-9!@#$%^&*(),.?":{}|<>].*/g.test(e)?{validity:!1,message:"cant start with numbers or special character"}:function(e){return!!a.projects.find((t=>t.title.toLowerCase()==e.toLowerCase()))}(e)?{validity:!1,message:"project name already exsists"}:{validity:!0,message:""}:{validity:!1,message:"cant enter empty name"}}const a=(()=>{if("undefined"!=typeof Storage){if(localStorage.masterObject){const e=new o,r=JSON.parse(localStorage.masterObject);return e.projects=r.projects.map((e=>{const o=new t;return o.tasks=e.tasks.map((e=>Object.assign(new n,e))),o.title=e.title,o})),localStorage.clear(),localStorage.masterObject=JSON.stringify(e),e}return localStorage.clear(),r()}return localStorage.clear(),r()})();function i(e){const n=document.querySelector("input#projectName"),o=s(n.value);if(!o.validity){const e=document.querySelector("span.projectErorrMsg");return e.textContent=o.message,void setTimeout((()=>{e.textContent=""}),1200)}const r=(c=n.value,new t(c));var c,i,l;i=r,(l=a).projects.push(i),localStorage.masterObject=JSON.stringify(l),b(r),j()}function l(e){const t=document.querySelector("input#taskTitle"),o=document.querySelector("#taskDescription"),r=document.querySelector("#priority"),c=document.querySelector("#projectSelection"),i=document.querySelector("#dueDate"),l=s(t.value);if(!l.validity){const e=document.querySelector("span.errorMsg");return e.textContent=l.message,void setTimeout((()=>{e.textContent=""}),1200)}const u=(d=i.value)?d.replace(/-/g,"/"):"not due";var d;const p=function(e,t,o,r,c){return new n(e,t,o,r,c)}(t.value,o.value,r.value,u,c.value);var m,y;m=p,(y=a).projects.find((e=>e.title==m.project)).tasks.push(m),localStorage.masterObject=JSON.stringify(y),h()}function u(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function d(e){return d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},d(e)}function p(e){u(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===d(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function m(e){u(1,arguments);var t=p(e);return t.setHours(0,0,0,0),t}function y(e,t){u(2,arguments);var n=m(e),o=m(t);return n.getTime()===o.getTime()}function f(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}var v={};function k(){return v}function S(e,t){var n,o,r,c,s,a,i,l;u(1,arguments);var d=k(),m=f(null!==(n=null!==(o=null!==(r=null!==(c=null==t?void 0:t.weekStartsOn)&&void 0!==c?c:null==t||null===(s=t.locale)||void 0===s||null===(a=s.options)||void 0===a?void 0:a.weekStartsOn)&&void 0!==r?r:d.weekStartsOn)&&void 0!==o?o:null===(i=d.locale)||void 0===i||null===(l=i.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==n?n:0);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var y=p(e),v=y.getDay(),S=(v<m?7:0)+v-m;return y.setDate(y.getDate()-S),y.setHours(0,0,0,0),y}function g(e,t,n){u(2,arguments);var o=S(e,n),r=S(t,n);return o.getTime()===r.getTime()}function h(e){const t=document.querySelector("#modalBackground"),n=document.querySelector(".modal"),o=document.querySelector(".cancelTaskBtn"),r=document.querySelector(".fa-x"),c=document.querySelector(".addTaskBtn");!function(e,t,...n){n.forEach((n=>n.removeEventListener(t,e)))}(h,"click",r,o),c.removeEventListener("click",l),t.removeChild(n),t.style.display="none"}function j(e){const t=document.querySelector(".projectCreator"),n=document.querySelector(".projects"),o=document.querySelector(".addProject"),r=document.querySelector(".dropDown"),c=document.querySelector(".addProjectBtn"),s=document.querySelector(".cancelProjectBtn");c.removeEventListener("click",i),s.removeEventListener("click",j),r.removeChild(t),n.style.display="flex",o.style.display="flex"}function b(...e){const t=document.querySelector(".projects");e.forEach((e=>{if("Home"==e.title)return;const n=e.projectHTML,o=n.querySelector(".bin"),r=n.querySelector(".taskCounter");n.setAttribute("project",`${e.title}`),o.addEventListener("click",c.bind(e)),r.textContent=e.tasks.length,t.appendChild(n)}))}const T=(e=>{document.querySelector("h2.selctionTitle");const t=document.querySelector(".tasks");return{homeTasks:function(){t.innerHTML="",e.tasks.forEach((e=>{t.appendChild(e.taskHTML)}))},todayTasks:function(){t.innerHTML="",e.tasks.forEach((e=>{(function(e){return u(1,arguments),y(e,Date.now())})(new Date(e.dueDate))&&t.appendChild(e.taskHTML)}))},weekTasks:function(){t.innerHTML="",e.tasks.forEach((e=>{(function(e,t){return u(1,arguments),g(e,Date.now(),t)})(new Date(e.dueDate))&&t.appendChild(e.taskHTML)}))},completedTasks:function(){t.innerHTML="",e.tasks.forEach((e=>{e.completion&&t.appendChild(e.taskHTML)}))},projectTasks:function(e){}}})(a),q=document.querySelector(".menuIcon"),w=document.querySelector(".projectsTitle"),L=document.querySelector(".addTask"),E=document.querySelector(".addProject");document.querySelector("aside"),document.querySelector("main"),q.addEventListener("click",(function(){const e=document.querySelector("main#main");document.querySelector(".taskContainer"),e.classList.toggle("menuIsNotActive")})),w.addEventListener("click",(function(e){const t=document.querySelector(".dropDown"),n=e.target.children[0];"none"==t.style.display?(t.style.display="flex",n.classList.toggle("fa-caret-down"),n.classList.toggle("fa-caret-up")):(t.style.display="none",n.classList.toggle("fa-caret-down"),n.classList.toggle("fa-caret-up"))})),L.addEventListener("click",(function(e){const t=document.querySelector("#modalBackground");if(t.childNodes.length>0)return;t.appendChild(function(e){const t=document.createElement("div");t.classList.add("modal"),t.innerHTML='\n        <div class="taskCreationHeader modalHeader">\n            <div>New Task</div>\n            <i class="fa-solid fa-x"></i>\n        </div>\n        <form class="taskCreationForm">\n            <div class="taskDetails1">\n                <label for="taskTitle">Title:</label>\n                <input class="taskEntry" type="text" id="taskTitle" placeholder="e.g. Pay bills" spellcheck = "true">\n                <span class="errorMsg"></span>\n\n                <label for="taskDescription">Description:</label>\n                <textarea class="taskEntry" id="taskDescription" placeholder="e.g. internet, phone, rent, etc" spellcheck = "true"></textarea>\n\n            </div>\n            <div class="taskDetails2">\n                <label for="dueDate">Due Date:</label>\n                <input type="date" class="taskEntry" id="dueDate">\n\n                <label for="priority">Priority:</label>\n                <select id="priority" class="taskEntry">\n                    <option value="none" selected>None</option>\n                    <option value="low">Low</option>\n                    <option value="medium">Medium</option>\n                    <option value="high">High</option>\n                </select>\n\n                <label for="projectSelection">Project:</label>\n                <select id="projectSelection" class="taskEntry">\n                \n                </select>\n            </div>\n            <div class="taskCreationDecision">\n                <button type="button" class="cancelTaskBtn modalBtn cancelModalBtn">Cancel</button>\n                <button type="button" class="addTaskBtn modalBtn addModalBtn">Add task</button>\n            </div>\n\n        </form>\n\n    ';const n=t.querySelector("#projectSelection");return e.projects.forEach((e=>{const t=document.createElement("option");t.textContent=e.title,"Home"==e.title&&(t.selected=!0),n.appendChild(t)})),t}(a));const n=document.querySelector(".fa-x"),o=document.querySelector(".cancelTaskBtn"),r=document.querySelector(".addTaskBtn");!function(e,t,...n){n.forEach((n=>n.addEventListener(t,e)))}(h,"click",n,o),r.addEventListener("click",l),t.style.display="flex"})),E.addEventListener("click",(function(t){e();const n=document.querySelector(".projects"),o=document.querySelector(".addProject");document.querySelector(".dropDown").appendChild(e());const r=document.querySelector(".addProjectBtn"),c=document.querySelector(".cancelProjectBtn");r.addEventListener("click",i),c.addEventListener("click",j),n.style.display="none",o.style.display="none"})),b(...a.projects),T.homeTasks()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,