(()=>{"use strict";function e(){const e=document.createElement("div");return e.classList.add("projectCreator"),e.innerHTML='\n        <div>\n            <input id="projectName" type="text" placeholder="Project name...">\n            <span class="projectErorrMsg"></span>\n        </div>\n        <div>\n            <button class="projectBtn cancelProjectBtn">Cancel</button>\n            <button class="projectBtn addProjectBtn">Add Project</button>\n        </div>\n    ',e}class t{constructor(e){this.title=e,this.tasks=[]}get projectHTML(){return function(e){const t=document.createElement("div");return t.classList.add("project"),t.innerHTML=`\n        <i class="fa-solid fa-circle"></i>\n        <div class="projectTitle">${e}</div>\n        <div class="taskCounter"></div>\n        <i class="fa-solid fa-trash bin"></i>\n    `,t}(this.title)}addTask(e){this.tasks.push(e)}removeTask(e){this.tasks.splice(e,1)}}class n{constructor(e,t,n,o,c){this.title=e,this.description=t,this.priority=n,this.dueDate=o,this.project=c,this.completion=!1}get taskHTML(){return function(e,t,n,o,c){const r=document.createElement("div");return r.setAttribute("project",`${o}`),r.classList.add("task"),c&&r.classList.add("completed"),r.innerHTML=`\n        <i class="fa-regular fa-square ${t} "></i>\n        <div class="taskTitle">${e}</div>\n        <button class="taskDetails">Details</button>\n        <div class="taskDate">${n}</div>\n        <i class="fa-solid fa-pen-to-square edit"></i>\n        <i class="fa-solid fa-trash bin"></i>\n    `,r}(this.title,this.priority,this.dueDate,this.project,this.completion)}}class o{constructor(){this.projects=[]}get tasks(){return this.projects.reduce(((e,t)=>e.concat(t.tasks)),[])}}function c(){const e=new o;e.projects.push(new t("Home"));const c=new n("exampleTask","testing please work","medium","12/12/12","Home");return e.projects[0].tasks.push(c),localStorage.masterObject=JSON.stringify(e),e}function r(e){return e?/^[1-9!@#$%^&*(),.?":{}|<>].*/g.test(e)?{validity:!1,message:"cant start with numbers or special character"}:function(e){return!!s.projects.find((t=>t.title.toLowerCase()==e.toLowerCase()))}(e)?{validity:!1,message:"project name already exsists"}:{validity:!0,message:""}:{validity:!1,message:"cant enter empty name"}}const s=(()=>{if("undefined"!=typeof Storage){if(localStorage.masterObject){const e=new o,c=JSON.parse(localStorage.masterObject);return e.projects=c.projects.map((e=>{const o=new t;return o.tasks=e.tasks.map((e=>Object.assign(new n,e))),o.title=e.title,o})),localStorage.clear(),localStorage.masterObject=JSON.stringify(e),e}return localStorage.clear(),c()}return localStorage.clear(),c()})();function a(e){const n=document.querySelector("input#projectName"),o=r(n.value);if(!o.validity){const e=document.querySelector("span.projectErorrMsg");return e.textContent=o.message,void setTimeout((()=>{e.textContent=""}),1200)}const c=(a=n.value,new t(a));var a,l,i;l=c,(i=s).projects.push(l),localStorage.masterObject=JSON.stringify(i),u(c),d()}function l(e){const t=document.querySelector("input#taskTitle"),o=document.querySelector("#taskDescription"),c=document.querySelector("#priority"),a=document.querySelector("#projectSelection"),l=document.querySelector("#dueDate"),d=r(t.value);if(!d.validity){const e=document.querySelector("span.errorMsg");return e.textContent=d.message,void setTimeout((()=>{e.textContent=""}),1200)}const u=(p=l.value)?p.replace(/-/g,"/"):"not due";var p;const m=function(e,t,o,c,r){return new n(e,t,o,c,r)}(t.value,o.value,c.value,u,a.value);var y,v;y=m,(v=s).projects.find((e=>e.title==y.project)).tasks.push(y),localStorage.masterObject=JSON.stringify(v),i()}function i(e){const t=document.querySelector("#modalBackground"),n=document.querySelector(".modal"),o=document.querySelector(".cancelTaskBtn"),c=document.querySelector(".fa-x"),r=document.querySelector(".addTaskBtn");!function(e,t,...n){n.forEach((n=>n.removeEventListener(t,e)))}(i,"click",c,o),r.removeEventListener("click",l),t.removeChild(n),t.style.display="none"}function d(e){const t=document.querySelector(".projectCreator"),n=document.querySelector(".projects"),o=document.querySelector(".addProject"),c=document.querySelector(".dropDown"),r=document.querySelector(".addProjectBtn"),s=document.querySelector(".cancelProjectBtn");r.removeEventListener("click",a),s.removeEventListener("click",d),c.removeChild(t),n.style.display="flex",o.style.display="flex"}function u(...e){const t=document.querySelector(".projects");e.forEach((e=>{"Home"!=e.title&&t.appendChild(e.projectHTML)}))}const p=(e=>{document.querySelector("h2.selctionTitle");const t=document.querySelector(".tasks");return{renderHome:function(){t.innerHTML="",e.tasks.forEach((e=>{t.appendChild(e.taskHTML)}))}}})(s),m=document.querySelector(".menuIcon"),y=document.querySelector(".projectsTitle"),v=document.querySelector(".addTask"),f=document.querySelector(".addProject");document.querySelector("aside"),document.querySelector("main"),m.addEventListener("click",(function(){const e=document.querySelector("main#main");document.querySelector(".taskContainer"),e.classList.toggle("menuIsNotActive")})),y.addEventListener("click",(function(e){const t=document.querySelector(".dropDown"),n=e.target.children[0];"none"==t.style.display?(t.style.display="flex",n.classList.toggle("fa-caret-down"),n.classList.toggle("fa-caret-up")):(t.style.display="none",n.classList.toggle("fa-caret-down"),n.classList.toggle("fa-caret-up"))})),v.addEventListener("click",(function(e){const t=document.querySelector("#modalBackground");if(t.childNodes.length>0)return;t.appendChild(function(e){const t=document.createElement("div");t.classList.add("modal"),t.innerHTML='\n        <div class="taskCreationHeader modalHeader">\n            <div>New Task</div>\n            <i class="fa-solid fa-x"></i>\n        </div>\n        <form class="taskCreationForm">\n            <div class="taskDetails1">\n                <label for="taskTitle">Title:</label>\n                <input class="taskEntry" type="text" id="taskTitle" placeholder="e.g. Pay bills" spellcheck = "true">\n                <span class="errorMsg"></span>\n\n                <label for="taskDescription">Description:</label>\n                <textarea class="taskEntry" id="taskDescription" placeholder="e.g. internet, phone, rent, etc" spellcheck = "true"></textarea>\n\n            </div>\n            <div class="taskDetails2">\n                <label for="dueDate">Due Date:</label>\n                <input type="date" class="taskEntry" id="dueDate">\n\n                <label for="priority">Priority:</label>\n                <select id="priority" class="taskEntry">\n                    <option value="none" selected>None</option>\n                    <option value="low">Low</option>\n                    <option value="medium">Medium</option>\n                    <option value="high">High</option>\n                </select>\n\n                <label for="projectSelection">Project:</label>\n                <select id="projectSelection" class="taskEntry">\n                \n                </select>\n            </div>\n            <div class="taskCreationDecision">\n                <button type="button" class="cancelTaskBtn modalBtn cancelModalBtn">Cancel</button>\n                <button type="button" class="addTaskBtn modalBtn addModalBtn">Add task</button>\n            </div>\n\n        </form>\n\n    ';const n=t.querySelector("#projectSelection");return e.projects.forEach((e=>{const t=document.createElement("option");t.textContent=e.title,"Home"==e.title&&(t.selected=!0),n.appendChild(t)})),t}(s));const n=document.querySelector(".fa-x"),o=document.querySelector(".cancelTaskBtn"),c=document.querySelector(".addTaskBtn");!function(e,t,...n){n.forEach((n=>n.addEventListener(t,e)))}(i,"click",n,o),c.addEventListener("click",l),t.style.display="flex"})),f.addEventListener("click",(function(t){e();const n=document.querySelector(".projects"),o=document.querySelector(".addProject");document.querySelector(".dropDown").appendChild(e());const c=document.querySelector(".addProjectBtn"),r=document.querySelector(".cancelProjectBtn");c.addEventListener("click",a),r.addEventListener("click",d),n.style.display="none",o.style.display="none"})),u(...s.projects),p.renderHome()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,