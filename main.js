(()=>{"use strict";function e(){const e=document.createElement("div");return e.classList.add("projectCreator"),e.innerHTML='\n        <div>\n            <input id="projectName" type="text" placeholder="Project name...">\n            <span class="projectErorrMsg"></span>\n        </div>\n        <div>\n            <button class="projectBtn cancelProjectBtn">Cancel</button>\n            <button class="projectBtn addProjectBtn">Add Project</button>\n        </div>\n    ',e}class t{constructor(e){this.title=e,this.tasks=[]}get projectHTML(){return function(e){const t=document.createElement("div");return t.classList.add("project"),t.innerHTML=`\n        <i class="fa-solid fa-circle"></i>\n        <div class="projectTitle">${e}</div>\n        <div class="taskCounter"></div>\n        <i class="fa-solid fa-trash bin"></i>\n    `,t}(this.title)}addTask(e){this.tasks.push(e)}removeTask(e){this.tasks.splice(e,1)}}class n{constructor(e,t,n,o,c){this.title=e,this.description=t,this.priority=n,this.dueDate=o,this.project=c,this.completion=!1}get taskHTML(){return function(e,t,n,o,c){const s=document.createElement("div");return s.setAttribute("project",`${o}`),s.classList.add("task"),c&&s.classList.add("completed"),s.innerHTML=`\n        <i class="fa-regular fa-square ${t} "></i>\n        <div class="taskTitle">${e}</div>\n        <button class="taskDetails">Details</button>\n        <div class="taskDate">${n}</div>\n        <i class="fa-solid fa-pen-to-square edit"></i>\n        <i class="fa-solid fa-trash bin"></i>\n    `,s}(this.title,this.priority,this.dueDate,this.project,this.completion)}}class o{constructor(){this.projects=[]}get tasks(){return this.projects.reduce(((e,t)=>e.concat(t.tasks)),[])}}function c(){const e=new o;e.projects.push(new t("Home"));const c=new n("exampleTask","testing please work","medium","12/12/12","Home");return e.projects[0].tasks.push(c),localStorage.masterObject=JSON.stringify(e),e}function s(e){return e?/^[1-9!@#$%^&*(),.?":{}|<>].*/g.test(e)?{validity:!1,message:"cant start with numbers or special character"}:function(e){return!!r.projects.find((t=>t.title.toLowerCase()==e.toLowerCase()))}(e)?{validity:!1,message:"project name already exsists"}:{validity:!0,message:""}:{validity:!1,message:"cant enter empty name"}}const r=(()=>{if("undefined"!=typeof Storage){if(localStorage.masterObject){const e=new o,c=JSON.parse(localStorage.masterObject);return e.projects=c.projects.map((e=>{const o=new t,c=e.tasks.map((e=>{const t=Object.assign(new n,e);return console.log(""),console.log(t),t}));return console.log("new tasks"),console.log(c),o.tasks=c,console.log("newProject.tasks"),console.log(o.tasks),console.log("newProject"),console.log(o),Object.assign(o,e)})),localStorage.clear(),localStorage.masterObject=JSON.stringify(e),e}return localStorage.clear(),c()}return localStorage.clear(),c()})();function a(e){const n=document.querySelector("input#projectName"),o=s(n.value);if(!o.validity){const e=document.querySelector("span.projectErorrMsg");return e.textContent=o.message,void setTimeout((()=>{e.textContent=""}),1200)}const c=(a=n.value,new t(a));var a,l,i;l=c,(i=r).projects.push(l),localStorage.masterObject=JSON.stringify(i),u(c),d()}function l(e){const t=document.querySelector("input#taskTitle"),o=document.querySelector("#taskDescription"),c=document.querySelector("#priority"),a=document.querySelector("#projectSelection"),l=document.querySelector("#dueDate"),d=s(t.value);if(!d.validity){const e=document.querySelector("span.errorMsg");return e.textContent=d.message,void setTimeout((()=>{e.textContent=""}),1200)}const u=(p=l.value)?p.replace(/-/g,"/"):"not due";var p;const m=function(e,t,o,c,s){return new n(e,t,o,c,s)}(t.value,o.value,c.value,u,a.value);var y,v;y=m,(v=r).projects.find((e=>e.title==y.project)).tasks.push(y),localStorage.masterObject=JSON.stringify(v),i()}function i(e){const t=document.querySelector("#modalBackground"),n=document.querySelector(".modal"),o=document.querySelector(".cancelTaskBtn"),c=document.querySelector(".fa-x"),s=document.querySelector(".addTaskBtn");!function(e,t,...n){n.forEach((n=>n.removeEventListener(t,e)))}(i,"click",c,o),s.removeEventListener("click",l),t.removeChild(n),t.style.display="none"}function d(e){const t=document.querySelector(".projectCreator"),n=document.querySelector(".projects"),o=document.querySelector(".addProject"),c=document.querySelector(".dropDown"),s=document.querySelector(".addProjectBtn"),r=document.querySelector(".cancelProjectBtn");s.removeEventListener("click",a),r.removeEventListener("click",d),c.removeChild(t),n.style.display="flex",o.style.display="flex"}function u(...e){const t=document.querySelector(".projects");e.forEach((e=>{"Home"!=e.title&&t.appendChild(e.projectHTML)}))}const p=(e=>{document.querySelector("h2.selctionTitle");const t=document.querySelector(".tasks");return{renderHome:function(){t.innerHTML="",e.tasks.forEach((e=>{t.appendChild(e.taskHTML)}))}}})(r),m=document.querySelector(".menuIcon"),y=document.querySelector(".projectsTitle"),v=document.querySelector(".addTask"),f=document.querySelector(".addProject");document.querySelector("aside"),document.querySelector("main"),m.addEventListener("click",(function(){const e=document.querySelector("main#main");document.querySelector(".taskContainer"),e.classList.toggle("menuIsNotActive")})),y.addEventListener("click",(function(e){const t=document.querySelector(".dropDown"),n=e.target.children[0];"none"==t.style.display?(t.style.display="flex",n.classList.toggle("fa-caret-down"),n.classList.toggle("fa-caret-up")):(t.style.display="none",n.classList.toggle("fa-caret-down"),n.classList.toggle("fa-caret-up"))})),v.addEventListener("click",(function(e){const t=document.querySelector("#modalBackground");if(t.childNodes.length>0)return;t.appendChild(function(e){const t=document.createElement("div");t.classList.add("modal"),t.innerHTML='\n        <div class="taskCreationHeader modalHeader">\n            <div>New Task</div>\n            <i class="fa-solid fa-x"></i>\n        </div>\n        <form class="taskCreationForm">\n            <div class="taskDetails1">\n                <label for="taskTitle">Title:</label>\n                <input class="taskEntry" type="text" id="taskTitle" placeholder="e.g. Pay bills" spellcheck = "true">\n                <span class="errorMsg"></span>\n\n                <label for="taskDescription">Description:</label>\n                <textarea class="taskEntry" id="taskDescription" placeholder="e.g. internet, phone, rent, etc" spellcheck = "true"></textarea>\n\n            </div>\n            <div class="taskDetails2">\n                <label for="dueDate">Due Date:</label>\n                <input type="date" class="taskEntry" id="dueDate">\n\n                <label for="priority">Priority:</label>\n                <select id="priority" class="taskEntry">\n                    <option value="none" selected>None</option>\n                    <option value="low">Low</option>\n                    <option value="medium">Medium</option>\n                    <option value="high">High</option>\n                </select>\n\n                <label for="projectSelection">Project:</label>\n                <select id="projectSelection" class="taskEntry">\n                \n                </select>\n            </div>\n            <div class="taskCreationDecision">\n                <button type="button" class="cancelTaskBtn modalBtn cancelModalBtn">Cancel</button>\n                <button type="button" class="addTaskBtn modalBtn addModalBtn">Add task</button>\n            </div>\n\n        </form>\n\n    ';const n=t.querySelector("#projectSelection");return e.projects.forEach((e=>{const t=document.createElement("option");t.textContent=e.title,"Home"==e.title&&(t.selected=!0),n.appendChild(t)})),t}(r));const n=document.querySelector(".fa-x"),o=document.querySelector(".cancelTaskBtn"),c=document.querySelector(".addTaskBtn");!function(e,t,...n){n.forEach((n=>n.addEventListener(t,e)))}(i,"click",n,o),c.addEventListener("click",l),t.style.display="flex"})),f.addEventListener("click",(function(t){e();const n=document.querySelector(".projects"),o=document.querySelector(".addProject");document.querySelector(".dropDown").appendChild(e());const c=document.querySelector(".addProjectBtn"),s=document.querySelector(".cancelProjectBtn");c.addEventListener("click",a),s.addEventListener("click",d),n.style.display="none",o.style.display="none"})),u(...r.projects),p.renderHome()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixFQUFnQlcsTUFBTUMsUUFBVSxNQUNwQyxJQ3pCQUUsRUFBY2EsaUJBQWlCLFNEeUN4QixTQUFnQ2hELEdBQ1osSUFBdkIsTUFDTTdCLEVBQVd6QixTQUFTd0QsY0FBYyxhQUNsQ2lDLEVBQWdCekYsU0FBU3dELGNBQWMsZUFDNUJ4RCxTQUFTd0QsY0FBYyxhQUMvQnVDLFlBQVksS0FFckIsTUFBTUosRUFBb0IzRixTQUFTd0QsY0FBYyxrQkFDM0NvQyxFQUFtQjVGLFNBQVN3RCxjQUFjLHFCQUVoRG1DLEVBQWtCVyxpQkFBaUIsUUFBUyxHQUM1Q1YsRUFBaUJVLGlCQUFpQixRQUFTZCxHQUUzQy9ELEVBQVM2RCxNQUFNQyxRQUFVLE9BQ3pCRSxFQUFjSCxNQUFNQyxRQUFVLE1BRWxDLElDcERBLEtBQWtCLFlBQ2xCLGMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL3NyYy9tb2R1bGVzL2RvbUNyZWF0aW9uLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vc3JjL21vZHVsZXMvY2xhc3Nlcy5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL3NyYy9tb2R1bGVzL2Z1bmN0aW9uLmpzIiwid2VicGFjazovL3RvLWRvLWxpc3QtYXBwLy4vc3JjL21vZHVsZXMvc3RvcmFnZS5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL3NyYy9tb2R1bGVzL2Z1bmN0aW9uQnVuZGxlci5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL3NyYy9tb2R1bGVzL1VJbWFuaXVwdWxhdGlvbi5qcyIsIndlYnBhY2s6Ly90by1kby1saXN0LWFwcC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYXN0ZXJPYmplY3QgfSBmcm9tIFwiLi9zdG9yYWdlXCJcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUYXNrTW9kYWwobWFzdGVyT2JqKXtcclxuICAgIGNvbnN0IHRhc2tDcmVhdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxyXG4gICAgdGFza0NyZWF0b3IuY2xhc3NMaXN0LmFkZChcIm1vZGFsXCIpXHJcbiAgICB0YXNrQ3JlYXRvci5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInRhc2tDcmVhdGlvbkhlYWRlciBtb2RhbEhlYWRlclwiPlxyXG4gICAgICAgICAgICA8ZGl2Pk5ldyBUYXNrPC9kaXY+XHJcbiAgICAgICAgICAgIDxpIGNsYXNzPVwiZmEtc29saWQgZmEteFwiPjwvaT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8Zm9ybSBjbGFzcz1cInRhc2tDcmVhdGlvbkZvcm1cIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhc2tEZXRhaWxzMVwiPlxyXG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cInRhc2tUaXRsZVwiPlRpdGxlOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9XCJ0YXNrRW50cnlcIiB0eXBlPVwidGV4dFwiIGlkPVwidGFza1RpdGxlXCIgcGxhY2Vob2xkZXI9XCJlLmcuIFBheSBiaWxsc1wiIHNwZWxsY2hlY2sgPSBcInRydWVcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXJyb3JNc2dcIj48L3NwYW4+XHJcblxyXG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cInRhc2tEZXNjcmlwdGlvblwiPkRlc2NyaXB0aW9uOjwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9XCJ0YXNrRW50cnlcIiBpZD1cInRhc2tEZXNjcmlwdGlvblwiIHBsYWNlaG9sZGVyPVwiZS5nLiBpbnRlcm5ldCwgcGhvbmUsIHJlbnQsIGV0Y1wiIHNwZWxsY2hlY2sgPSBcInRydWVcIj48L3RleHRhcmVhPlxyXG5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YXNrRGV0YWlsczJcIj5cclxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJkdWVEYXRlXCI+RHVlIERhdGU6PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiZGF0ZVwiIGNsYXNzPVwidGFza0VudHJ5XCIgaWQ9XCJkdWVEYXRlXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj1cInByaW9yaXR5XCI+UHJpb3JpdHk6PC9sYWJlbD5cclxuICAgICAgICAgICAgICAgIDxzZWxlY3QgaWQ9XCJwcmlvcml0eVwiIGNsYXNzPVwidGFza0VudHJ5XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIm5vbmVcIiBzZWxlY3RlZD5Ob25lPC9vcHRpb24+XHJcbiAgICAgICAgICAgICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cImxvd1wiPkxvdzwvb3B0aW9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxvcHRpb24gdmFsdWU9XCJtZWRpdW1cIj5NZWRpdW08L29wdGlvbj5cclxuICAgICAgICAgICAgICAgICAgICA8b3B0aW9uIHZhbHVlPVwiaGlnaFwiPkhpZ2g8L29wdGlvbj5cclxuICAgICAgICAgICAgICAgIDwvc2VsZWN0PlxyXG5cclxuICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJwcm9qZWN0U2VsZWN0aW9uXCI+UHJvamVjdDo8L2xhYmVsPlxyXG4gICAgICAgICAgICAgICAgPHNlbGVjdCBpZD1cInByb2plY3RTZWxlY3Rpb25cIiBjbGFzcz1cInRhc2tFbnRyeVwiPlxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICA8L3NlbGVjdD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YXNrQ3JlYXRpb25EZWNpc2lvblwiPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJjYW5jZWxUYXNrQnRuIG1vZGFsQnRuIGNhbmNlbE1vZGFsQnRuXCI+Q2FuY2VsPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImFkZFRhc2tCdG4gbW9kYWxCdG4gYWRkTW9kYWxCdG5cIj5BZGQgdGFzazwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPC9mb3JtPlxyXG5cclxuICAgIGBcclxuICAgIC8vIGFjY2Vzc2luZyB0aGUgc2Vjb25kIHNlbGVjdCBvcHRpb25cclxuICAgIGNvbnN0IHByb2plY3RTZWxlY3RvciA9IHRhc2tDcmVhdG9yLnF1ZXJ5U2VsZWN0b3IoXCIjcHJvamVjdFNlbGVjdGlvblwiKVxyXG4gICAgbWFzdGVyT2JqLnByb2plY3RzLmZvckVhY2gocHJvamVjdCA9PiB7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKVxyXG4gICAgICAgIG9wdGlvbi50ZXh0Q29udGVudCA9IHByb2plY3QudGl0bGVcclxuICAgICAgICAvLyBkZWZhdWx0IG9wdGlvblxyXG4gICAgICAgIGlmIChwcm9qZWN0LnRpdGxlID09IFwiSG9tZVwiKSBvcHRpb24uc2VsZWN0ZWQgPSB0cnVlXHJcblxyXG4gICAgICAgIHByb2plY3RTZWxlY3Rvci5hcHBlbmRDaGlsZChvcHRpb24pXHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gdGFza0NyZWF0b3JcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb2plY3RDcmVhdG9yICgpIHtcclxuICAgIGNvbnN0IHByb2plY3RDcmVhdG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxyXG4gICAgcHJvamVjdENyZWF0b3IuY2xhc3NMaXN0LmFkZChcInByb2plY3RDcmVhdG9yXCIpXHJcbiAgICBwcm9qZWN0Q3JlYXRvci5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPGlucHV0IGlkPVwicHJvamVjdE5hbWVcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiUHJvamVjdCBuYW1lLi4uXCI+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwicHJvamVjdEVyb3JyTXNnXCI+PC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJwcm9qZWN0QnRuIGNhbmNlbFByb2plY3RCdG5cIj5DYW5jZWw8L2J1dHRvbj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInByb2plY3RCdG4gYWRkUHJvamVjdEJ0blwiPkFkZCBQcm9qZWN0PC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICBgXHJcbiAgICByZXR1cm4gcHJvamVjdENyZWF0b3JcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb2plY3QocHJvamVjdFRpdGxlKSB7XHJcbiAgICBjb25zdCBwcm9qZWN0SFRNTCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIilcclxuICAgIHByb2plY3RIVE1MLmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0XCIpXHJcbiAgICBwcm9qZWN0SFRNTC5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgPGkgY2xhc3M9XCJmYS1zb2xpZCBmYS1jaXJjbGVcIj48L2k+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInByb2plY3RUaXRsZVwiPiR7cHJvamVjdFRpdGxlfTwvZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0YXNrQ291bnRlclwiPjwvZGl2PlxyXG4gICAgICAgIDxpIGNsYXNzPVwiZmEtc29saWQgZmEtdHJhc2ggYmluXCI+PC9pPlxyXG4gICAgYFxyXG4gICAgcmV0dXJuIHByb2plY3RIVE1MXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUYXNrKHRpdGxlLHByaW9yaXR5LGR1ZURhdGUscHJvamVjdCxjb21wbGV0aW9uKSB7XHJcbiAgICBjb25zdCB0YXNrID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKVxyXG4gICAgdGFzay5zZXRBdHRyaWJ1dGUoXCJwcm9qZWN0XCIsYCR7cHJvamVjdH1gKVxyXG4gICAgdGFzay5jbGFzc0xpc3QuYWRkKFwidGFza1wiKVxyXG4gICAgaWYgKGNvbXBsZXRpb24pIHRhc2suY2xhc3NMaXN0LmFkZChcImNvbXBsZXRlZFwiKVxyXG4gICAgdGFzay5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgPGkgY2xhc3M9XCJmYS1yZWd1bGFyIGZhLXNxdWFyZSAke3ByaW9yaXR5fSBcIj48L2k+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInRhc2tUaXRsZVwiPiR7dGl0bGV9PC9kaXY+XHJcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInRhc2tEZXRhaWxzXCI+RGV0YWlsczwvYnV0dG9uPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0YXNrRGF0ZVwiPiR7ZHVlRGF0ZX08L2Rpdj5cclxuICAgICAgICA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLXBlbi10by1zcXVhcmUgZWRpdFwiPjwvaT5cclxuICAgICAgICA8aSBjbGFzcz1cImZhLXNvbGlkIGZhLXRyYXNoIGJpblwiPjwvaT5cclxuICAgIGBcclxuICAgIHJldHVybiB0YXNrXHJcbn0iLCJpbXBvcnQgKiBhcyBjcmVhdGlvbiBmcm9tIFwiLi9kb21DcmVhdGlvblwiXHJcblxyXG5leHBvcnQgY2xhc3MgUHJvamVjdCB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0aXRsZSkge1xyXG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZVxyXG4gICAgICAgIHRoaXMudGFza3MgPSBbXVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBnZXQgcHJvamVjdEhUTUwgKCkge1xyXG4gICAgICAgIHJldHVybiBjcmVhdGlvbi5jcmVhdGVQcm9qZWN0KHRoaXMudGl0bGUpXHJcbiAgICB9XHJcbiAgICBcclxuICAgIGFkZFRhc2sodGFzayl7XHJcbiAgICAgICAgdGhpcy50YXNrcy5wdXNoKHRhc2spXHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlVGFzayh0YXNrSW5kZXgpIHtcclxuICAgICAgICB0aGlzLnRhc2tzLnNwbGljZSh0YXNrSW5kZXgsIDEpXHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgdGFzayB7XHJcbiAgICBjb25zdHJ1Y3Rvcih0aXRsZSxkZXNjcmlwdGlvbixwcmlvcml0eSxkdWVEYXRlLHByb2plY3QpIHtcclxuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xyXG4gICAgICAgIHRoaXMucHJpb3JpdHk9IHByaW9yaXR5O1xyXG4gICAgICAgIHRoaXMuZHVlRGF0ZSA9IGR1ZURhdGU7XHJcbiAgICAgICAgdGhpcy5wcm9qZWN0ID0gcHJvamVjdFxyXG4gICAgICAgIHRoaXMuY29tcGxldGlvbiA9ICBmYWxzZTtcclxuICAgIH1cclxuICAgICBcclxuICAgIGdldCB0YXNrSFRNTCAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGNyZWF0aW9uLmNyZWF0ZVRhc2soXHJcbiAgICAgICAgICAgIHRoaXMudGl0bGUsXHJcbiAgICAgICAgICAgIHRoaXMucHJpb3JpdHksXHJcbiAgICAgICAgICAgIHRoaXMuZHVlRGF0ZSxcclxuICAgICAgICAgICAgdGhpcy5wcm9qZWN0LFxyXG4gICAgICAgICAgICB0aGlzLmNvbXBsZXRpb24sXHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIG1hc3Rlck9iamVjdCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnByb2plY3RzID0gW11cclxuICAgIH1cclxuXHJcbiAgICBnZXQgdGFza3MoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJvamVjdHMucmVkdWNlKCh0YXNrc0FycmF5LHByb2plY3QpPT4oXHJcbiAgICAgICAgICAgIHRhc2tzQXJyYXkuY29uY2F0KHByb2plY3QudGFza3MpKSxbXSlcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbiIsImltcG9ydCAqIGFzIGNscyBmcm9tIFwiLi9jbGFzc2VzXCI7XHJcbmltcG9ydCAqIGFzIHN0ciBmcm9tIFwiLi9zdG9yYWdlXCJcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGaXJzdFRpbWVNYXN0ZXJPYmooKSB7XHJcbiAgICAvLyBjcmVhdGluZyBtYXN0ZXIgb2JqZWN0XHJcbiAgICBjb25zdCBtYXN0ZXJPYmplY3QgPSBuZXcgY2xzLm1hc3Rlck9iamVjdCgpXHJcbiAgICAvLyBhZGRpbmcgaG9tZSBwcm9qZWN0XHJcbiAgICBtYXN0ZXJPYmplY3QucHJvamVjdHMucHVzaChuZXcgY2xzLlByb2plY3QoXCJIb21lXCIpKVxyXG4gICAgLy8gYWRkaW5nIGV4YW1wbGUgdGFza1xyXG4gICAgY29uc3QgZXhhbXBsZVRhc2sgPSBuZXcgY2xzLnRhc2soXCJleGFtcGxlVGFza1wiLFwidGVzdGluZyBwbGVhc2Ugd29ya1wiLCBcIm1lZGl1bVwiLFwiMTIvMTIvMTJcIixcIkhvbWVcIilcclxuICAgIG1hc3Rlck9iamVjdC5wcm9qZWN0c1swXS50YXNrcy5wdXNoKGV4YW1wbGVUYXNrKVxyXG4gICAgbG9jYWxTdG9yYWdlLm1hc3Rlck9iamVjdCA9IEpTT04uc3RyaW5naWZ5KG1hc3Rlck9iamVjdCkgICAgXHJcbiAgICByZXR1cm4gbWFzdGVyT2JqZWN0XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhZGRFdmVudCAoZnVuYyxldmVudCwgLi4uZWxlbWVudHMgKSB7XHJcbiAgICBlbGVtZW50cy5mb3JFYWNoKGVsZW1lbnQ9PmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCxmdW5jKSl9O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUV2ZW50IChmdW5jLGV2ZW50LCAuLi5lbGVtZW50cyApIHtcclxuICAgIGVsZW1lbnRzLmZvckVhY2goZWxlbWVudD0+IGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCxmdW5jKSl9O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVByb2plY3QoaW5wdXRWYWx1ZSl7XHJcbiAgICBjb25zdCBuZXdQcm9qZWN0ID0gbmV3IGNscy5Qcm9qZWN0KGlucHV0VmFsdWUpXHJcbiAgICAvLyAgZm9yIGV4cGFuc2lvbiBpZiBuZWVkZWRcclxuICAgIHJldHVybiBuZXdQcm9qZWN0XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUYXNrKHRpdGxlLGRlc2NyaXB0aW9uLHByaW9yaXR5LGR1ZURhdGUscHJvamVjdCkge1xyXG4gICAgY29uc3QgbmV3VGFzayA9IG5ldyBjbHMudGFzayh0aXRsZSxkZXNjcmlwdGlvbixwcmlvcml0eSxkdWVEYXRlLHByb2plY3QpXHJcbiAgICAvLyBmaXIgZXhwYW5zaW9uIGlkIG5lZWRlZFxyXG4gICAgcmV0dXJuIG5ld1Rhc2tcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrTmFtZVZhbGlkaXR5KG5hbWUpIHtcclxuICAgIGNvbnN0IEludmFsaWRQYXR0ZXJuID0gL15bMS05IUAjJCVeJiooKSwuP1wiOnt9fDw+XS4qL2dcclxuICAgIGlmICghbmFtZSkgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmFsaWRpdHk6ZmFsc2UsXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiY2FudCBlbnRlciBlbXB0eSBuYW1lXCJcclxuICAgICAgICB9IFxyXG4gICAgZWxzZSBpZiAoSW52YWxpZFBhdHRlcm4udGVzdChuYW1lKSkgcmV0dXJuIHtcclxuICAgICAgICB2YWxpZGl0eTpmYWxzZSxcclxuICAgICAgICBtZXNzYWdlOiBcImNhbnQgc3RhcnQgd2l0aCBudW1iZXJzIG9yIHNwZWNpYWwgY2hhcmFjdGVyXCJcclxuICAgICAgICB9XHJcbiAgICBlbHNlIGlmIChjaGVja1JlcGVhdGVkUHJvamVjdE5hbWUobmFtZSkpIHJldHVybiB7XHJcbiAgICAgICAgdmFsaWRpdHk6ZmFsc2UsXHJcbiAgICAgICAgbWVzc2FnZTogXCJwcm9qZWN0IG5hbWUgYWxyZWFkeSBleHNpc3RzXCJcclxuICAgIH1cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgdmFsaWRpdHk6dHJ1ZSxcclxuICAgICAgICBtZXNzYWdlIDogXCJcIlxyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja1JlcGVhdGVkUHJvamVjdE5hbWUgKG5hbWUpIHtcclxuICAgIHJldHVybiAhIShzdHIubWFzdGVyT2JqZWN0LnByb2plY3RzLmZpbmQocHJvamVjdCA9PlxyXG4gICAgICAgIHByb2plY3QudGl0bGUudG9Mb3dlckNhc2UoKSA9PSBuYW1lLnRvTG93ZXJDYXNlKCkpKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RGF0ZSAoZGF0ZSkge1xyXG4gICAgaWYgKCFkYXRlKSByZXR1cm4gXCJub3QgZHVlXCJcclxuICAgIC8vcmVwbGFjaW5nIC0gd2l0aCAvXHJcbiAgICByZXR1cm4gZGF0ZS5yZXBsYWNlKC8tL2csIFwiL1wiKVxyXG59IiwiaW1wb3J0IHtjcmVhdGVGaXJzdFRpbWVNYXN0ZXJPYmp9IGZyb20gXCIuL2Z1bmN0aW9uXCJcclxuaW1wb3J0ICogYXMgY2xzIGZyb20gXCIuL2NsYXNzZXNcIlxyXG5cclxuZXhwb3J0IGNvbnN0IG1hc3Rlck9iamVjdCA9ICgoKT0+e1xyXG4gICAgaWYgKHR5cGVvZihTdG9yYWdlKSAhPT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgIGlmIChsb2NhbFN0b3JhZ2UubWFzdGVyT2JqZWN0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld01hc3Rlck9iamVjdCA9IG5ldyBjbHMubWFzdGVyT2JqZWN0KClcclxuICAgICAgICAgICAgY29uc3Qgc3RvcmVkTWFzdGVyT2JqZWN0ID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UubWFzdGVyT2JqZWN0KVxyXG4gICAgICAgICAgICAvLyB0cmFuc2ZlcmluZyBhbGwgcHJvamVjdHMgYW5kIHRhc2tzXHJcbiAgICAgICAgICAgIG5ld01hc3Rlck9iamVjdC5wcm9qZWN0cyA9IHN0b3JlZE1hc3Rlck9iamVjdC5wcm9qZWN0cy5tYXAocHJvamVjdD0+e1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3UHJvamVjdCA9IG5ldyBjbHMuUHJvamVjdCgpXHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdUYXNrcyA9IHByb2plY3QudGFza3MubWFwKHRhc2s9PntcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YXJpYWJsZT0gT2JqZWN0LmFzc2lnbihuZXcgY2xzLnRhc2soKSx0YXNrKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlwiKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHZhcmlhYmxlKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YXJpYWJsZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIm5ldyB0YXNrc1wiKVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobmV3VGFza3MpXHJcbiAgICAgICAgICAgICAgICBuZXdQcm9qZWN0LnRhc2tzID0gbmV3VGFza3NcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibmV3UHJvamVjdC50YXNrc1wiKVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobmV3UHJvamVjdC50YXNrcylcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibmV3UHJvamVjdFwiKVxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobmV3UHJvamVjdClcclxuICAgICAgICAgICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ld1Byb2plY3QsIHByb2plY3QpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC8vIHNhdmluZyB0aGUgbWFzdGVyIG9iamVjdCB0byBsb2NhbCBzdG9yYWdlXHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5jbGVhcigpICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5tYXN0ZXJPYmplY3QgPSBKU09OLnN0cmluZ2lmeShuZXdNYXN0ZXJPYmplY3QpXHJcbiAgICAgICAgICAgIHJldHVybiBuZXdNYXN0ZXJPYmplY3RcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIGp1c3QgdG8gbWFrZSBzdXJlIHRoZSB1c2VyIGRpZG50IGNoYW5nZSB0aGUgbG9jYWwgc3RvcmFnZVxyXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2UuY2xlYXIoKSAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlRmlyc3RUaW1lTWFzdGVyT2JqKClcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2UgeyAgICBcclxuICAgICAgICAvLyBqdXN0IHRvIG1ha2Ugc3VyZSB0aGUgdXNlciBkaWRudCBjaGFuZ2UgdGhlIGxvY2FsIHN0b3JhZ2VcclxuICAgICAgICBsb2NhbFN0b3JhZ2UuY2xlYXIoKSAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgIHJldHVybiBjcmVhdGVGaXJzdFRpbWVNYXN0ZXJPYmooKVxyXG4gICAgfVxyXG59KSgpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNhdmVQcm9qZWN0IChwcm9qZWN0LG1hc3Rlck9iaikge1xyXG4gICAgbWFzdGVyT2JqLnByb2plY3RzLnB1c2gocHJvamVjdClcclxuICAgIGxvY2FsU3RvcmFnZS5tYXN0ZXJPYmplY3QgPSBKU09OLnN0cmluZ2lmeShtYXN0ZXJPYmopXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzYXZlVGFzayh0YXNrLCBtYXN0ZXJPYmopIHtcclxuICAgIChtYXN0ZXJPYmoucHJvamVjdHMuZmluZChwcm9qZWN0ID0+IHByb2plY3QudGl0bGUgPT0gdGFzay5wcm9qZWN0XHJcbiAgICAgICAgKSkudGFza3MucHVzaCh0YXNrKVxyXG4gICAgbG9jYWxTdG9yYWdlLm1hc3Rlck9iamVjdCA9IEpTT04uc3RyaW5naWZ5KG1hc3Rlck9iailcclxuXHJcbn0iLCJpbXBvcnQgKiBhcyBjcmVhdGlvbiBmcm9tIFwiLi9kb21DcmVhdGlvblwiXHJcbmltcG9ydCAqIGFzIGZ1bmMgZnJvbSBcIi4vZnVuY3Rpb25cIlxyXG5pbXBvcnQgKiBhcyBzdHIgZnJvbSBcIi4vc3RvcmFnZVwiXHJcbmltcG9ydCAqIGFzIFVJIGZyb20gXCIuL1VJbWFuaXVwdWxhdGlvblwiXHJcblxyXG4vLyBmb3Igd2hlbiB0aGUgdGhlIHVzZXIgd2FudHMgdG8gY29uZmlybSB0aGVpciBwcm9qZWN0IGNyZWF0aW9uXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQcm9qZWN0KGV2ZW50KSB7XHJcbiAgICBjb25zdCBpbnB1dEZpZWxkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImlucHV0I3Byb2plY3ROYW1lXCIpXHJcbiAgICBjb25zdCB2YWx1ZUluZm8gPSBmdW5jLmNoZWNrTmFtZVZhbGlkaXR5KGlucHV0RmllbGQudmFsdWUpXHJcblxyXG4gICAgLy8gY29uc3QgXHJcbiAgICBpZiAoIXZhbHVlSW5mby52YWxpZGl0eSkge1xyXG4gICAgICAgIGNvbnN0IGVycm9yTXNnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInNwYW4ucHJvamVjdEVyb3JyTXNnXCIpXHJcbiAgICAgICAgZXJyb3JNc2cudGV4dENvbnRlbnQgPSB2YWx1ZUluZm8ubWVzc2FnZTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpPT57ZXJyb3JNc2cudGV4dENvbnRlbnQ9XCJcIn0sMTIwMClcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIC8vIHByb2plY3QgY3JlYXRpb25cclxuICAgIGNvbnN0IG5ld1Byb2plY3QgPSBmdW5jLmNyZWF0ZVByb2plY3QoaW5wdXRGaWVsZC52YWx1ZSlcclxuICAgIHN0ci5zYXZlUHJvamVjdChuZXdQcm9qZWN0LHN0ci5tYXN0ZXJPYmplY3QpXHJcbiAgICBVSS5hZGRQcm9qZWN0cyhuZXdQcm9qZWN0KVxyXG4gICAgLy8gZmluaXNoaW5nXHJcbiAgICBVSS5yZW1vdmVQcm9qZWN0Q3JlYXRpb24oKVxyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVRhc2soZXZlbnQpIHtcclxuICAgIGNvbnN0IHRhc2tOYW1lRmllbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaW5wdXQjdGFza1RpdGxlXCIpXHJcbiAgICBjb25zdCB0YXNrRGVzY3JpcHRpb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3Rhc2tEZXNjcmlwdGlvblwiKVxyXG4gICAgY29uc3QgdGFza1ByaW9yaXR5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcmlvcml0eVwiKVxyXG4gICAgY29uc3QgcHJvamVjdFNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNwcm9qZWN0U2VsZWN0aW9uXCIpXHJcbiAgICBjb25zdCBkdWVEYXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNkdWVEYXRlXCIpXHJcbiAgICAvLyBpcyBuYW1lIHZhbGlmXHJcbiAgICBcclxuICAgIGNvbnN0IHRhc2tOYW1lSW5mbyA9IGZ1bmMuY2hlY2tOYW1lVmFsaWRpdHkodGFza05hbWVGaWVsZC52YWx1ZSlcclxuICAgIC8vIGNvbnN0IFxyXG4gICAgaWYgKCF0YXNrTmFtZUluZm8udmFsaWRpdHkpIHtcclxuICAgICAgICBjb25zdCBlcnJvck1zZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzcGFuLmVycm9yTXNnXCIpXHJcbiAgICAgICAgZXJyb3JNc2cudGV4dENvbnRlbnQgPSB0YXNrTmFtZUluZm8ubWVzc2FnZTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpPT57ZXJyb3JNc2cudGV4dENvbnRlbnQ9XCJcIn0sMTIwMClcclxuICAgICAgICByZXR1cm5cclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB1c2VhYmxlRGF0ZSA9IGZ1bmMuZm9ybWF0RGF0ZShkdWVEYXRlLnZhbHVlKVxyXG4gICAgY29uc3QgbmV3VGFzayA9IGZ1bmMuY3JlYXRlVGFzayhcclxuICAgICAgICB0YXNrTmFtZUZpZWxkLnZhbHVlLFxyXG4gICAgICAgIHRhc2tEZXNjcmlwdGlvbi52YWx1ZSxcclxuICAgICAgICB0YXNrUHJpb3JpdHkudmFsdWUsXHJcbiAgICAgICAgdXNlYWJsZURhdGUsXHJcbiAgICAgICAgcHJvamVjdFNlbGVjdGVkLnZhbHVlXHJcbiAgICApXHJcbiAgICBzdHIuc2F2ZVRhc2sobmV3VGFzayxzdHIubWFzdGVyT2JqZWN0KVxyXG4gICAgLy8gcmVuZGVyIG5ldyB0YXNrcyBmdW5jdGlvblxyXG4gICAgVUkucmVtb3ZlTW9kYWwoKVxyXG5cclxufSIsImltcG9ydCAqIGFzIGNyZWF0aW9uIGZyb20gXCIuL2RvbUNyZWF0aW9uXCJcclxuaW1wb3J0ICogYXMgZnVuYyBmcm9tIFwiLi9mdW5jdGlvblwiXHJcbmltcG9ydCAqIGFzIGJ1bmRsZSBmcm9tIFwiLi9mdW5jdGlvbkJ1bmRsZXJcIlxyXG5pbXBvcnQgKiBhcyBzdHIgZnJvbSBcIi4vc3RvcmFnZVwiXHJcbmltcG9ydCAqIGFzIGNscyBmcm9tIFwiLi9jbGFzc2VzXCJcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkaXNwbGF5TWVudSgpIHtcclxuICAgIGNvbnN0IG1haW4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwibWFpbiNtYWluXCIpXHJcbiAgICBjb25zdCB0YXNrQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50YXNrQ29udGFpbmVyXCIpXHJcbiAgICBtYWluLmNsYXNzTGlzdC50b2dnbGUoXCJtZW51SXNOb3RBY3RpdmVcIilcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRpc3BsYXlQcm9qZWN0cyhldmVudCkge1xyXG4gICAgY29uc3QgZHJvcERvd24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmRyb3BEb3duXCIpXHJcbiAgICBjb25zdCBjYXJldFN5bWJvbCA9IGV2ZW50LnRhcmdldC5jaGlsZHJlblswXVxyXG4gICAgaWYgKGRyb3BEb3duLnN0eWxlLmRpc3BsYXkgPT0gXCJub25lXCIpIHtcclxuICAgICAgICBkcm9wRG93bi5zdHlsZS5kaXNwbGF5ID0gXCJmbGV4XCJcclxuICAgICAgICBjYXJldFN5bWJvbC5jbGFzc0xpc3QudG9nZ2xlKFwiZmEtY2FyZXQtZG93blwiKVxyXG4gICAgICAgIGNhcmV0U3ltYm9sLmNsYXNzTGlzdC50b2dnbGUoXCJmYS1jYXJldC11cFwiKVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBkcm9wRG93bi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCJcclxuICAgICAgICBjYXJldFN5bWJvbC5jbGFzc0xpc3QudG9nZ2xlKFwiZmEtY2FyZXQtZG93blwiKVxyXG4gICAgICAgIGNhcmV0U3ltYm9sLmNsYXNzTGlzdC50b2dnbGUoXCJmYS1jYXJldC11cFwiKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGlzcGxheU1vZGFsKGV2ZW50KXtcclxuICAgIGNvbnN0IGJhY2tncm91bmRNb2RhbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbW9kYWxCYWNrZ3JvdW5kXCIpXHJcbiAgICBpZiAoYmFja2dyb3VuZE1vZGFsLmNoaWxkTm9kZXMubGVuZ3RoID4gMCkgcmV0dXJuXHJcbiAgICBiYWNrZ3JvdW5kTW9kYWwuYXBwZW5kQ2hpbGQoY3JlYXRpb24uY3JlYXRlVGFza01vZGFsKHN0ci5tYXN0ZXJPYmplY3QpKVxyXG5cclxuICAgIGNvbnN0IGNyb3NzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mYS14XCIpXHJcbiAgICBjb25zdCBjYW5jZWxCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhbmNlbFRhc2tCdG5cIilcclxuICAgIGNvbnN0IGNvbmZpcm1UYXNrID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGRUYXNrQnRuXCIpXHJcbiAgICAvLyBhZGRpbmcgZXZlbnQgbGlzdGVuZXJzXHJcbiAgICBmdW5jLmFkZEV2ZW50KHJlbW92ZU1vZGFsLFwiY2xpY2tcIixjcm9zcyxjYW5jZWxCdG4pXHJcbiAgICBjb25maXJtVGFzay5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIixidW5kbGUuY3JlYXRlVGFzaylcclxuXHJcbiAgICBiYWNrZ3JvdW5kTW9kYWwuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVNb2RhbChldmVudCkge1xyXG4gICAgY29uc3QgYmFja2dyb3VuZE1vZGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNtb2RhbEJhY2tncm91bmRcIilcclxuICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1vZGFsXCIpXHJcbiAgICBjb25zdCBjYW5jZWxCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmNhbmNlbFRhc2tCdG5cIilcclxuICAgIGNvbnN0IGNyb3NzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5mYS14XCIpXHJcbiAgICBjb25zdCBjb25maXJtVGFzayA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkVGFza0J0blwiKVxyXG5cclxuICAgIGZ1bmMucmVtb3ZlRXZlbnQocmVtb3ZlTW9kYWwsXCJjbGlja1wiLGNyb3NzLGNhbmNlbEJ0bilcclxuICAgIGNvbmZpcm1UYXNrLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGJ1bmRsZS5jcmVhdGVUYXNrKVxyXG5cclxuICAgIGJhY2tncm91bmRNb2RhbC5yZW1vdmVDaGlsZChmb3JtKVxyXG4gICAgYmFja2dyb3VuZE1vZGFsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIlxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGlzcGxheVByb2plY3RDcmVhdGlvbihldmVudCkge1xyXG4gICAgY29uc3QgcHJvamVjdENyZWF0b3IgPSBjcmVhdGlvbi5jcmVhdGVQcm9qZWN0Q3JlYXRvcigpXHJcbiAgICBjb25zdCBwcm9qZWN0cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvamVjdHNcIilcclxuICAgIGNvbnN0IGFkZFByb2plY3RCdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmFkZFByb2plY3RcIilcclxuICAgIGNvbnN0IGRyb3Bkb3duID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5kcm9wRG93blwiKVxyXG4gICAgZHJvcGRvd24uYXBwZW5kQ2hpbGQoY3JlYXRpb24uY3JlYXRlUHJvamVjdENyZWF0b3IoKSlcclxuICAgIC8vICBidXR0b25zIG9uIG1vZGFsXHJcbiAgICBjb25zdCBjb25maXJtUHJvamVjdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkUHJvamVjdEJ0blwiKVxyXG4gICAgY29uc3QgY2FuY2VsUHJvamVjdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2FuY2VsUHJvamVjdEJ0blwiKVxyXG5cclxuICAgIGNvbmZpcm1Qcm9qZWN0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBidW5kbGUuY3JlYXRlUHJvamVjdClcclxuICAgIGNhbmNlbFByb2plY3RCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHJlbW92ZVByb2plY3RDcmVhdGlvbilcclxuXHJcbiAgICBwcm9qZWN0cy5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCJcclxuICAgIGFkZFByb2plY3RCdG4uc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXHJcblxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlUHJvamVjdENyZWF0aW9uKGV2ZW50KSB7XHJcbiAgICBjb25zdCBwcm9qZWN0Q3JlYXRvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucHJvamVjdENyZWF0b3JcIilcclxuICAgIGNvbnN0IHByb2plY3RzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5wcm9qZWN0c1wiKVxyXG4gICAgY29uc3QgYWRkUHJvamVjdEJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkUHJvamVjdFwiKVxyXG4gICAgY29uc3QgZHJvcGRvd24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLmRyb3BEb3duXCIpICAgIFxyXG4gICAgLy8gIGJ1dHRvbnMgb24gbW9kYWxcclxuICAgIGNvbnN0IGNvbmZpcm1Qcm9qZWN0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGRQcm9qZWN0QnRuXCIpXHJcbiAgICBjb25zdCBjYW5jZWxQcm9qZWN0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jYW5jZWxQcm9qZWN0QnRuXCIpXHJcblxyXG4gICAgY29uZmlybVByb2plY3RCdG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGJ1bmRsZS5jcmVhdGVQcm9qZWN0KVxyXG4gICAgY2FuY2VsUHJvamVjdEJ0bi5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIixyZW1vdmVQcm9qZWN0Q3JlYXRpb24pXHJcblxyXG5cclxuICAgIGRyb3Bkb3duLnJlbW92ZUNoaWxkKHByb2plY3RDcmVhdG9yKVxyXG4gICAgcHJvamVjdHMuc3R5bGUuZGlzcGxheSA9IFwiZmxleFwiXHJcbiAgICBhZGRQcm9qZWN0QnRuLnN0eWxlLmRpc3BsYXkgPSBcImZsZXhcIlxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWRkUHJvamVjdHMoLi4ucHJvamVjdHMpIHtcclxuICAgIGNvbnN0IHByb2plY3RDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2plY3RzXCIpXHJcbiAgICBwcm9qZWN0cy5mb3JFYWNoKHByb2plY3Q9PntcclxuICAgICAgICBpZiAocHJvamVjdC50aXRsZSA9PSBcIkhvbWVcIikgcmV0dXJuXHJcbiAgICAgICAgcHJvamVjdENvbnRhaW5lci5hcHBlbmRDaGlsZChwcm9qZWN0LnByb2plY3RIVE1MKVxyXG4gICAgfSlcclxufVxyXG4vLyB0YXNrIGNoYW5pbmcgbW9kdWxlXHJcbmV4cG9ydCBjb25zdCB0YXNrc2tVaSA9ICgobWFzdGVyT2JqKT0+e1xyXG4gICAgY29uc3QgU2VsZWN0aW9uVGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiaDIuc2VsY3Rpb25UaXRsZVwiKVxyXG4gICAgY29uc3QgdGFza3NDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnRhc2tzXCIpXHJcbiAgICBmdW5jdGlvbiByZW5kZXJIb21lKCkge1xyXG4gICAgICAgIHRhc2tzQ29udGFpbmVyLmlubmVySFRNTD1cIlwiXHJcbiAgICAgICAgbWFzdGVyT2JqLnRhc2tzLmZvckVhY2godGFzaz0+e1xyXG4gICAgICAgICAgICAvLyB0YXNrc0NvbnRhaW5lci5hcHBlbmRDaGlsZCgoT2JqZWN0LmFzc2lnbihcclxuICAgICAgICAgICAgLy8gICAgIG5ldyBjbHMudGFzaywgdGFzaykpLnRhc2tIVE1MKTtcclxuICAgICAgICAgICAgdGFza3NDb250YWluZXIuYXBwZW5kQ2hpbGQodGFzay50YXNrSFRNTCk7XHJcbiAgICAgICAgfSlcclxuICAgIH0gXHJcblxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgcmVuZGVySG9tZSxcclxuXHJcbiAgICB9XHJcbn0pKHN0ci5tYXN0ZXJPYmplY3QpIiwiaW1wb3J0ICogYXMgc3RyIGZyb20gXCIuL21vZHVsZXMvc3RvcmFnZVwiXHJcbmltcG9ydCAqIGFzIFVJIGZyb20gXCIuL21vZHVsZXMvVUltYW5pdXB1bGF0aW9uXCJcclxuaW1wb3J0ICogYXMgZnVuYyBmcm9tIFwiLi9tb2R1bGVzL2Z1bmN0aW9uXCJcclxuLy8gZWxlbWVudHNcclxuY29uc3QgbWVudUljb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLm1lbnVJY29uXCIpXHJcbmNvbnN0IHByb2plY3RzRHJvcGRvd24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLnByb2plY3RzVGl0bGVcIilcclxuY29uc3QgYWRkVGFza0J0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuYWRkVGFza1wiKVxyXG5jb25zdCBhZGRQcm9qZWN0QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5hZGRQcm9qZWN0XCIpXHJcbmNvbnN0IHNpZGVCYXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYXNpZGVcIilcclxuY29uc3QgbWFpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJtYWluXCIpXHJcbi8vIGV2ZW50IGxpc3RlbmVyc1xyXG5tZW51SWNvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiAsIFVJLmRpc3BsYXlNZW51KVxyXG5wcm9qZWN0c0Ryb3Bkb3duLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBVSS5kaXNwbGF5UHJvamVjdHMpXHJcbmFkZFRhc2tCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsVUkuZGlzcGxheU1vZGFsKVxyXG5hZGRQcm9qZWN0QnRuLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLFVJLmRpc3BsYXlQcm9qZWN0Q3JlYXRpb24pXHJcbi8vIG1haW50aW5nIHNpZGViYXIgaGVpZ2h0XHJcbi8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsZSA9PlxyXG4vLyAgICAgc2lkZUJhci5zdHlsZS5oZWlnaHQgPSBgJHttYWluLnNjcm9sbEhlaWdodH1weGApXHJcbi8vIG90aGVyXHJcblVJLmFkZFByb2plY3RzKC4uLnN0ci5tYXN0ZXJPYmplY3QucHJvamVjdHMpXHJcblVJLnRhc2tza1VpLnJlbmRlckhvbWUoKSJdLCJuYW1lcyI6WyJjcmVhdGVQcm9qZWN0Q3JlYXRvciIsInByb2plY3RDcmVhdG9yIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiaW5uZXJIVE1MIiwiUHJvamVjdCIsImNvbnN0cnVjdG9yIiwidGl0bGUiLCJ0aGlzIiwidGFza3MiLCJwcm9qZWN0SFRNTCIsInByb2plY3RUaXRsZSIsImFkZFRhc2siLCJ0YXNrIiwicHVzaCIsInJlbW92ZVRhc2siLCJ0YXNrSW5kZXgiLCJzcGxpY2UiLCJkZXNjcmlwdGlvbiIsInByaW9yaXR5IiwiZHVlRGF0ZSIsInByb2plY3QiLCJjb21wbGV0aW9uIiwidGFza0hUTUwiLCJzZXRBdHRyaWJ1dGUiLCJwcm9qZWN0cyIsInJlZHVjZSIsInRhc2tzQXJyYXkiLCJjb25jYXQiLCJjcmVhdGVGaXJzdFRpbWVNYXN0ZXJPYmoiLCJtYXN0ZXJPYmplY3QiLCJleGFtcGxlVGFzayIsImxvY2FsU3RvcmFnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjaGVja05hbWVWYWxpZGl0eSIsIm5hbWUiLCJ0ZXN0IiwidmFsaWRpdHkiLCJtZXNzYWdlIiwidG9Mb3dlckNhc2UiLCJjaGVja1JlcGVhdGVkUHJvamVjdE5hbWUiLCJuZXdNYXN0ZXJPYmplY3QiLCJzdG9yZWRNYXN0ZXJPYmplY3QiLCJwYXJzZSIsIm1hcCIsIm5ld1Byb2plY3QiLCJuZXdUYXNrcyIsInZhcmlhYmxlIiwiT2JqZWN0IiwiYXNzaWduIiwiY29uc29sZSIsImxvZyIsImNsZWFyIiwiZXZlbnQiLCJpbnB1dEZpZWxkIiwicXVlcnlTZWxlY3RvciIsInZhbHVlSW5mbyIsInZhbHVlIiwiZXJyb3JNc2ciLCJ0ZXh0Q29udGVudCIsInNldFRpbWVvdXQiLCJpbnB1dFZhbHVlIiwibWFzdGVyT2JqIiwidGFza05hbWVGaWVsZCIsInRhc2tEZXNjcmlwdGlvbiIsInRhc2tQcmlvcml0eSIsInByb2plY3RTZWxlY3RlZCIsInRhc2tOYW1lSW5mbyIsInVzZWFibGVEYXRlIiwiZGF0ZSIsInJlcGxhY2UiLCJuZXdUYXNrIiwiZmluZCIsInJlbW92ZU1vZGFsIiwiYmFja2dyb3VuZE1vZGFsIiwiZm9ybSIsImNhbmNlbEJ0biIsImNyb3NzIiwiY29uZmlybVRhc2siLCJmdW5jIiwiZWxlbWVudHMiLCJmb3JFYWNoIiwiZWxlbWVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVDaGlsZCIsInN0eWxlIiwiZGlzcGxheSIsInJlbW92ZVByb2plY3RDcmVhdGlvbiIsImFkZFByb2plY3RCdG4iLCJkcm9wZG93biIsImNvbmZpcm1Qcm9qZWN0QnRuIiwiY2FuY2VsUHJvamVjdEJ0biIsImFkZFByb2plY3RzIiwicHJvamVjdENvbnRhaW5lciIsImFwcGVuZENoaWxkIiwidGFza3NrVWkiLCJ0YXNrc0NvbnRhaW5lciIsInJlbmRlckhvbWUiLCJtZW51SWNvbiIsInByb2plY3RzRHJvcGRvd24iLCJhZGRUYXNrQnRuIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm1haW4iLCJ0b2dnbGUiLCJkcm9wRG93biIsImNhcmV0U3ltYm9sIiwidGFyZ2V0IiwiY2hpbGRyZW4iLCJjaGlsZE5vZGVzIiwibGVuZ3RoIiwidGFza0NyZWF0b3IiLCJwcm9qZWN0U2VsZWN0b3IiLCJvcHRpb24iLCJzZWxlY3RlZCJdLCJzb3VyY2VSb290IjoiIn0=